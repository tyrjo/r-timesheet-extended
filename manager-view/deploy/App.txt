<!DOCTYPE html>
<html>

<head>
    <title>CATS-
        timesheet-with-approval (manager-view)-
            0.0.1
    </title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Apr 12 2018 17:03:48 GMT+0000 (UTC) -->

    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Apr 12 2018 17:03:48 GMT+0000 (UTC)";
        var ARTIFACT = "";
        var BUILDER = "ec2-user";
        var CHECKSUM = "747798573843";
    </script>

    <script type="text/javascript" src="https://us1.rallydev.com/apps/2.1/sdk-debug.js"></script>
    <!-- our highcharts (needed so that we can add patterns)
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->


    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('TSUtilities', {
    singleton: true,

    timeLockKeyPrefix: 'rally.technicalservices.timesheet.weeklock',
    approvalKeyPrefix: 'rally.technicalservices.timesheet.status',
    deletionKeyPrefix: 'rally.technicalservices.timesheet.deletion',
    pinKeyPrefix: 'rally.technicalservices.timesheet.pin',

    archiveSuffix: '~archived',

    loadWsapiRecords: function(config, returnOperation) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;

        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config, config)).load({
            callback: function(records, operation, successful) {
                if (successful) {
                    if (returnOperation) {
                        deferred.resolve(operation);
                    }
                    else {
                        deferred.resolve(records);
                    }
                }
                else {
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },

    loadWsapiRecordsWithParallelPages: function(config, msg) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        var count_check_config = Ext.clone(config);
        count_check_config.limit = 1;
        count_check_config.pageSize = 1;
        count_check_config.fetch = ['ObjectID'];

        this.loadWsapiRecords(count_check_config, true).then({
            success: function(operation) {
                config.pageSize = 200;
                config.limit = config.pageSize;
                var total = operation.resultSet.totalRecords;
                var page_count = Math.ceil(total / config.pageSize);

                var promises = [];
                Ext.Array.each(_.range(1, page_count + 1), function(page_index) {
                    var config_clone = Ext.clone(config);
                    config_clone.currentPage = page_index;
                    promises.push(function() {
                        var percentage = parseInt(page_index * 100 / page_count, 10);
                        var message = msg || "Loading values";
                        Rally.getApp().setLoading(message + " (" + percentage + "%)");
                        return me.loadWsapiRecords(config_clone);
                    });
                });
                CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
                    success: function(results) {
                        deferred.resolve(Ext.Array.flatten(results));
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    getPreferenceProject: function() {
        var app = Rally.getApp();

        return app.getSetting('preferenceProjectRef');
    },

    isEditableProjectForCurrentUser: function(projectRef, scope) {
        var app = scope || Rally.getApp(),
            me = this;

        if (this.currentUserIsAdmin(scope)) {
            return true;
        }

        var project_oid = this._getOidFromRef(projectRef);
        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission) {
            if (permission.Role != "Editor" && permission.Role != "ProjectAdmin") {
                return false;
            }

            return (me._getOidFromRef(permission._ref) == project_oid);
        });

        console.log(editor_permissions);
        return (editor_permissions.length > 0);
    },

    getEditableProjectForCurrentUser: function() {
        var app = Rally.getApp();
        if (this._currentUserCanWrite()) {
            return app.getContext().getProjectRef();
        }

        var workspace_oid = this._getOidFromRef(app.getContext().getWorkspaceRef());

        var editor_permissions = Ext.Array.filter(app.getContext().getPermissions().userPermissions, function(permission) {
            if (Ext.isEmpty(permission.Workspace)) {
                return false;
            }
            var permission_oid = this._getOidFromRef(permission.Workspace);

            //console.log('comparing ', workspace_oid, permission_oid, permission);
            if (workspace_oid != permission_oid) {
                return false;
            }

            return (permission.Role == "Editor" || permission.Role == "ProjectAdmin");
        }, this);


        if (editor_permissions.length > 0) {
            return editor_permissions[0]._ref;
        }
        return false;
    },

    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/, '').split(/\//);
        return ref_array[ref_array.length - 1].replace(/\.js/, '');
    },

    // true if sub or workspace admin
    currentUserIsAdmin: function(scope) {
        var app = scope || Rally.getApp();

        console.log('current user:', app.getContext().getUser());
        if (this.currentUserIsSubAdmin()) {
            return true;
        }

        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return (p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });

        var currentWorkspaceOid = this._getOidFromRef(app.getContext().getWorkspace()._ref);
        var is_workspace_admin = false;

        if (workspace_admin_list.length > 0) {
            Ext.Array.each(workspace_admin_list, function(p) {
                if (currentWorkspaceOid == this._getOidFromRef(p._ref)) {
                    is_workspace_admin = true;
                }
            }, this);
        }

        return is_workspace_admin;
    },

    currentUserIsSubAdmin: function(scope) {
        var app = scope || Rally.getApp();

        var permissions = app.getContext().getPermissions().userPermissions;

        var sub_admin_list = Ext.Array.filter(permissions, function(p) {
            return (p.Role == 'Subscription Admin');
        });

        return (sub_admin_list.length > 0);
    },

    _currentUserCanWrite: function() {
        var app = Rally.getApp();

        //console.log('_currentUserCanWrite',app.getContext().getUser(), app.getContext().getUser().SubscriptionAdmin);
        if (app.getContext().getUser().SubscriptionAdmin) {
            return true;
        }

        var permissions = app.getContext().getPermissions().userPermissions;

        var workspace_admin_list = Ext.Array.filter(permissions, function(p) {
            return (p.Role == "Workspace Admin" || p.Role == "Subscription Admin");
        });

        var currentWorkspaceOid = this._getOidFromRef(app.getContext().getWorkspace()._ref);
        var can_unlock = false;

        if (workspace_admin_list.length > 0) {
            Ext.Array.each(workspace_admin_list, function(p) {
                if (currentWorkspaceOid == this._getOidFromRef(p._ref)) {
                    can_unlock = true;
                }
            }, this);
        }

        return can_unlock;
    },

    _currentUserCanUnapprove: function() {
        return this.currentUserIsAdmin();
    }
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.techservices.promise.ParallelThrottle',{
    requires: ['Deft.promise.Promise'],
    statics: {

        throttle: function (fns, maxParallelCalls, scope) {

            if (maxParallelCalls <= 0 || fns.length < maxParallelCalls){
                return Deft.promise.Chain.parallel(fns, scope);
            }


            var parallelFns = [],
                fnChunks = [],
                idx = -1;

            for (var i = 0; i < fns.length; i++) {
                if (i % maxParallelCalls === 0) {
                    idx++;
                    fnChunks[idx] = [];
                }
                fnChunks[idx].push(fns[i]);
            }

            _.each(fnChunks, function (chunk) {
                parallelFns.push(function () {
                    return Deft.promise.Chain.parallel(chunk, scope);
                });
            });

            return Deft.Promise.reduce(parallelFns, function(groupResults, fnGroup) {
                return Deft.Promise.when(fnGroup.call(scope)).then(function(results) {
                    groupResults = groupResults.concat(results || []);
                    return groupResults;
                });
            }, []);
        }
    }
});
Ext.define('TSDateUtils', {
    singleton: true,
    
    getBeginningOfWeekForLocalDate: function(week_date) {
        var start_of_week_here = Ext.Date.add(week_date, Ext.Date.DAY, -1 * week_date.getDay());
        return start_of_week_here;
    },
    
    getBeginningOfWeekISOForLocalDate: function(week_date,showShiftedTimeStamp) {
        var offset = week_date.getTimezoneOffset();  // 480 is pacific, -330 is india
        
        var local_beginning = TSDateUtils.getBeginningOfWeekForLocalDate(week_date);
        var shifted_time = Rally.util.DateTime.add(week_date,'minute',offset);
                
        if ( shifted_time.getUTCDay() === 0 && shifted_time.getHours() === 0  ) {
            // this is already the beginning of the week
            var shifted_string = this.formatShiftedDate(week_date, 'Y-m-d');
            if ( showShiftedTimeStamp ) {
                return shifted_string + 'T00:00:00.0Z';
            }
            return shifted_string;
        }
        
        if (showShiftedTimeStamp) {
            return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'T00:00:00.0Z');
        }
        
        return Rally.util.DateTime.toIsoString(local_beginning).replace(/T.*$/,'');
    },
    
    formatShiftedDate: function(jsdate,format) {
        var offset = jsdate.getTimezoneOffset();  // 480 is pacific, -330 is india

        if ( offset > 0 ) {
            jsdate = Rally.util.DateTime.add(jsdate,'minute',offset);
        }

        return Ext.util.Format.date(jsdate,format);
    },
    
    pretendIMeantUTC: function(jsdate,asUTC) {
        var offset = jsdate.getTimezoneOffset();
        
        if ( asUTC ) {
            return Rally.util.DateTime.toIsoString(jsdate).replace(/T.*$/,'T00:00:00.000Z');
        }
        var shiftedDate = Rally.util.DateTime.add(jsdate,'minute',-1 * offset);
        
        return shiftedDate;
    },
    
    // returns a promise, fulfills with a boolean
    isApproved: function(week_start_iso, user_oid) {
        var deferred = Ext.create('Deft.Deferred');
        
        var short_iso_date = week_start_iso;
        var key_user_oid = user_oid || Rally.getApp().getContext().getUser().ObjectID;
        
        var key = Ext.String.format("{0}.{1}.{2}", 
            TSUtilities.approvalKeyPrefix,
            short_iso_date,
            key_user_oid
        );
        
        this._loadWeekStatusPreference(key).then({
            success: function(preference) {
                if (preference.length === 0) { 
                    deferred.resolve(false);
                    return;
                }
                var value = preference[0].get('Value');
                if ( /{/.test(value) ) {
                    var status_object = Ext.JSON.decode(value);
                    if ( status_object.status == "Approved" ) { 
                        deferred.resolve(true);
                        return;
                    }
                }
                
                deferred.resolve(false);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _loadWeekStatusPreference: function(key) {
        
        var config = {
            model:'Preference',
            limit: 1,
            pageSize: 1,
            filters: [
                {property:'Name',operator: 'contains', value:key},
                {property:'Name',operator:'!contains',value: TSUtilities.archiveSuffix}
            ],
            fetch: ['Name','Value'],
            sorters: [{property:'CreationDate', direction: 'DESC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    }
});

Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        var model = grid.model;        
        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            csv.push( me._getCSVFromRecord(row, grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
/* Blob.js
 * A Blob implementation.
 * 2014-05-31
 * 
 * By Eli Grey, http://eligrey.com
 * By Devin Samarin, https://github.com/eboyjr
 * License: X11/MIT
 *   See https://github.com/eligrey/Blob.js/blob/master/LICENSE.md
 */

/*global self, unescape */
/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,
  plusplus: true */

/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */

(function (view) {
    "use strict";

    view.URL = view.URL || view.webkitURL;

    if (view.Blob && view.URL) {
        try {
            new Blob;
            return;
        } catch (e) {}
    }

    // Internally we use a BlobBuilder implementation to base Blob off of
    // in order to support older browsers that only have BlobBuilder
    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || (function(view) {
        var
              get_class = function(object) {
                return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1];
            }
            , FakeBlobBuilder = function BlobBuilder() {
                this.data = [];
            }
            , FakeBlob = function Blob(data, type, encoding) {
                this.data = data;
                this.size = data.length;
                this.type = type;
                this.encoding = encoding;
            }
            , FBB_proto = FakeBlobBuilder.prototype
            , FB_proto = FakeBlob.prototype
            , FileReaderSync = view.FileReaderSync
            , FileException = function(type) {
                this.code = this[this.name = type];
            }
            , file_ex_codes = (
                  "NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR "
                + "NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR"
            ).split(" ")
            , file_ex_code = file_ex_codes.length
            , real_URL = view.URL || view.webkitURL || view
            , real_create_object_URL = real_URL.createObjectURL
            , real_revoke_object_URL = real_URL.revokeObjectURL
            , URL = real_URL
            , btoa = view.btoa
            , atob = view.atob
            
            , ArrayBuffer = view.ArrayBuffer
            , Uint8Array = view.Uint8Array
        ;
        FakeBlob.fake = FB_proto.fake = true;
        while (file_ex_code--) {
            FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;
        }
        if (!real_URL.createObjectURL) {
            URL = view.URL = {};
        }
        URL.createObjectURL = function(blob) {
            var
                  type = blob.type
                , data_URI_header
            ;
            if (type === null) {
                type = "application/octet-stream";
            }
            if (blob instanceof FakeBlob) {
                data_URI_header = "data:" + type;
                if (blob.encoding === "base64") {
                    return data_URI_header + ";base64," + blob.data;
                } else if (blob.encoding === "URI") {
                    return data_URI_header + "," + decodeURIComponent(blob.data);
                } if (btoa) {
                    return data_URI_header + ";base64," + btoa(blob.data);
                } else {
                    return data_URI_header + "," + encodeURIComponent(blob.data);
                }
            } else if (real_create_object_URL) {
                return real_create_object_URL.call(real_URL, blob);
            }
        };
        URL.revokeObjectURL = function(object_URL) {
            if (object_URL.substring(0, 5) !== "data:" && real_revoke_object_URL) {
                real_revoke_object_URL.call(real_URL, object_URL);
            }
        };
        FBB_proto.append = function(data/*, endings*/) {
            var bb = this.data;
            // decode data to a binary string
            if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {
                var
                      str = ""
                    , buf = new Uint8Array(data)
                    , i = 0
                    , buf_len = buf.length
                ;
                for (; i < buf_len; i++) {
                    str += String.fromCharCode(buf[i]);
                }
                bb.push(str);
            } else if (get_class(data) === "Blob" || get_class(data) === "File") {
                if (FileReaderSync) {
                    var fr = new FileReaderSync;
                    bb.push(fr.readAsBinaryString(data));
                } else {
                    // async FileReader won't work as BlobBuilder is sync
                    throw new FileException("NOT_READABLE_ERR");
                }
            } else if (data instanceof FakeBlob) {
                if (data.encoding === "base64" && atob) {
                    bb.push(atob(data.data));
                } else if (data.encoding === "URI") {
                    bb.push(decodeURIComponent(data.data));
                } else if (data.encoding === "raw") {
                    bb.push(data.data);
                }
            } else {
                if (typeof data !== "string") {
                    data += ""; // convert unsupported types to strings
                }
                // decode UTF-16 to binary string
                bb.push(unescape(encodeURIComponent(data)));
            }
        };
        FBB_proto.getBlob = function(type) {
            if (!arguments.length) {
                type = null;
            }
            return new FakeBlob(this.data.join(""), type, "raw");
        };
        FBB_proto.toString = function() {
            return "[object BlobBuilder]";
        };
        FB_proto.slice = function(start, end, type) {
            var args = arguments.length;
            if (args < 3) {
                type = null;
            }
            return new FakeBlob(
                  this.data.slice(start, args > 1 ? end : this.data.length)
                , type
                , this.encoding
            );
        };
        FB_proto.toString = function() {
            return "[object Blob]";
        };
        FB_proto.close = function() {
            this.size = 0;
            delete this.data;
        };
        return FakeBlobBuilder;
    }(view));

    view.Blob = function Blob(blobParts, options) {
        var type = options ? (options.type || "") : "";
        var builder = new BlobBuilder();
        if (blobParts) {
            for (var i = 0, len = blobParts.length; i < len; i++) {
                builder.append(blobParts[i]);
            }
        }
        return builder.getBlob(type);
    };
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || this.content || this));
/* FileSaver.js
 *  A saveAs() FileSaver implementation.
 *  2014-05-27
 *
 *  By Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function(view) {
    "use strict";
    // IE <10 is explicitly unsupported
    if (typeof navigator !== "undefined" &&
        /MSIE [1-9]\./.test(navigator.userAgent)) {
        return;
    }
    var
          doc = view.document
          // only get URL when necessary in case Blob.js hasn't overridden it yet
        , get_URL = function() {
            return view.URL || view.webkitURL || view;
        }
        , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
        , can_use_save_link = !view.externalHost && "download" in save_link
        , click = function(node) {
            var event = doc.createEvent("MouseEvents");
            event.initMouseEvent(
                "click", true, false, view, 0, 0, 0, 0, 0
                , false, false, false, false, 0, null
            );
            node.dispatchEvent(event);
        }
        , webkit_req_fs = view.webkitRequestFileSystem
        , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
        , throw_outside = function(ex) {
            (view.setImmediate || view.setTimeout)(function() {
                throw ex;
            }, 0);
        }
        , force_saveable_type = "application/octet-stream"
        , fs_min_size = 0
        , deletion_queue = []
        , process_deletion_queue = function() {
            var i = deletion_queue.length;
            while (i--) {
                var file = deletion_queue[i];
                if (typeof file === "string") { // file is an object URL
                    get_URL().revokeObjectURL(file);
                } else { // file is a File
                    file.remove();
                }
            }
            deletion_queue.length = 0; // clear queue
        }
        , dispatch = function(filesaver, event_types, event) {
            event_types = [].concat(event_types);
            var i = event_types.length;
            while (i--) {
                var listener = filesaver["on" + event_types[i]];
                if (typeof listener === "function") {
                    try {
                        listener.call(filesaver, event || filesaver);
                    } catch (ex) {
                        throw_outside(ex);
                    }
                }
            }
        }
        , FileSaver = function(blob, name) {
            // First try a.download, then web filesystem, then object URLs
            var
                  filesaver = this
                , type = blob.type
                , blob_changed = false
                , object_url
                , target_view
                , get_object_url = function() {
                    var object_url = get_URL().createObjectURL(blob);
                    deletion_queue.push(object_url);
                    return object_url;
                }
                , dispatch_all = function() {
                    dispatch(filesaver, "writestart progress write writeend".split(" "));
                }
                // on any filesys errors revert to saving with object URLs
                , fs_error = function() {
                    // don't create more object URLs than needed
                    if (blob_changed || !object_url) {
                        object_url = get_object_url(blob);
                    }
                    if (target_view) {
                        target_view.location.href = object_url;
                    } else {
                        window.open(object_url, "_blank");
                    }
                    filesaver.readyState = filesaver.DONE;
                    dispatch_all();
                }
                , abortable = function(func) {
                    return function() {
                        if (filesaver.readyState !== filesaver.DONE) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                , create_if_not_found = {create: true, exclusive: false}
                , slice
            ;
            filesaver.readyState = filesaver.INIT;
            if (!name) {
                name = "download";
            }
            if (can_use_save_link) {
                object_url = get_object_url(blob);
                save_link.href = object_url;
                save_link.download = name;
                click(save_link);
                filesaver.readyState = filesaver.DONE;
                dispatch_all();
                return;
            }
            // Object and web filesystem URLs have a problem saving in Google Chrome when
            // viewed in a tab, so I force save with application/octet-stream
            // http://code.google.com/p/chromium/issues/detail?id=91158
            if (view.chrome && type && type !== force_saveable_type) {
                slice = blob.slice || blob.webkitSlice;
                blob = slice.call(blob, 0, blob.size, force_saveable_type);
                blob_changed = true;
            }
            // Since I can't be sure that the guessed media type will trigger a download
            // in WebKit, I append .download to the filename.
            // https://bugs.webkit.org/show_bug.cgi?id=65440
            if (webkit_req_fs && name !== "download") {
                name += ".download";
            }
            if (type === force_saveable_type || webkit_req_fs) {
                target_view = view;
            }
            if (!req_fs) {
                fs_error();
                return;
            }
            fs_min_size += blob.size;
            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {
                fs.root.getDirectory("saved", create_if_not_found, abortable(function(dir) {
                    var save = function() {
                        dir.getFile(name, create_if_not_found, abortable(function(file) {
                            file.createWriter(abortable(function(writer) {
                                writer.onwriteend = function(event) {
                                    target_view.location.href = file.toURL();
                                    deletion_queue.push(file);
                                    filesaver.readyState = filesaver.DONE;
                                    dispatch(filesaver, "writeend", event);
                                };
                                writer.onerror = function() {
                                    var error = writer.error;
                                    if (error.code !== error.ABORT_ERR) {
                                        fs_error();
                                    }
                                };
                                "writestart progress write abort".split(" ").forEach(function(event) {
                                    writer["on" + event] = filesaver["on" + event];
                                });
                                writer.write(blob);
                                filesaver.abort = function() {
                                    writer.abort();
                                    filesaver.readyState = filesaver.DONE;
                                };
                                filesaver.readyState = filesaver.WRITING;
                            }), fs_error);
                        }), fs_error);
                    };
                    dir.getFile(name, {create: false}, abortable(function(file) {
                        // delete file if it already exists
                        file.remove();
                        save();
                    }), abortable(function(ex) {
                        if (ex.code === ex.NOT_FOUND_ERR) {
                            save();
                        } else {
                            fs_error();
                        }
                    }));
                }), fs_error);
            }), fs_error);
        }
        , FS_proto = FileSaver.prototype
        , saveAs = function(blob, name) {
            return new FileSaver(blob, name);
        }
    ;
    FS_proto.abort = function() {
        var filesaver = this;
        filesaver.readyState = filesaver.DONE;
        dispatch(filesaver, "abort");
    };
    FS_proto.readyState = FS_proto.INIT = 0;
    FS_proto.WRITING = 1;
    FS_proto.DONE = 2;

    FS_proto.error =
    FS_proto.onwritestart =
    FS_proto.onprogress =
    FS_proto.onwrite =
    FS_proto.onabort =
    FS_proto.onerror =
    FS_proto.onwriteend =
        null;

    view.addEventListener("unload", process_deletion_queue, false);
    saveAs.unload = function() {
        process_deletion_queue();
        view.removeEventListener("unload", process_deletion_queue, false);
    };
    return saveAs;
}(
       typeof self !== "undefined" && self
    || typeof window !== "undefined" && window
    || this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
  module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
  define([], function() {
    return saveAs;
  });
}
Ext.define('Rally.technicalservices.AbsorbTimeEntryMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsabsorbtimeentrymenuitem',


    config: {
        text: 'Absorb Values',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._absorbRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        return !record.isLocked();
    },
    _absorbRecord: function(record) {
        var timetable = this.view.ownerCt.ownerCt;
        
        timetable.absorbTime(record);
    },
    
    _absorbRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
        
        Ext.Array.each(records, function(record) {
            this._absorbRecord(record);
        },this);
    }
});
Ext.define('Rally.technicalservices.AlterTimeEntryMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsaltertimeentrymenuitem',


    config: {
        text: 'Alter Values',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._alterRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        return !record.isLocked();
    },
    _alterRecord: function(record) {
        var timetable = this.view.ownerCt.ownerCt;
        
        timetable.cloneForAppending(record);
    },
    
    _alterRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
        
        Ext.Array.each(records, function(record) {
            this._alterRecord(record);
        },this);
    }
});
Ext.override(Rally.ui.grid.CheckboxModel, {
    _recordIsSelectable: function(record) {
        return true;
    }
});
/* for saving as default */

Ext.define('Rally.technicalservices.PinTimeEntryMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tspintimeentrymenuitem',


    config: {
        text: 'Set As Default',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._pinRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        return !record.isLocked() && !record.isPinned() && !record.isDeleted();
    },
    _pinRecord: function(record) {
        var timetable = this.view.ownerCt.ownerCt;
        
        timetable.pinTime(record);
    },
    
    _pinRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
        
        Ext.Array.each(records, function(record) {
            this._pinRecord(record);
        },this);
    }
});
Ext.define('Rally.technicalservices.RemoveTimeEntryMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsremovetimeentrymenuitem',


    config: {
        text: 'Clear & Remove',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._removeRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        return !record.isLocked();
    },
    _removeRecord: function(record) {
        record.clearAndRemove();
    },
    
    _removeRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
        
        Ext.Array.each(records, function(record) {
            this._removeRecord(record);
        },this);
    }
});

Ext.define('Rally.technicalservices.TimeEntryRecordMenu', {
    extend: 'Rally.ui.menu.RecordMenu',
    alias: 'widget.tstimeentryrecordmenu',

    config: {

        /**
         * @cfg {Rally.data.Model} record (required)
         * The record to build the menu for
         */
        record: null,

        /**
         * @cfg {Ext.Element|HTMLElement} (optional) owningEl
         * The element this menu item is being invoked against.
         */
        owningEl: undefined,
        
        forModification: false

    },

    initComponent: function() {
        this.items = this._getMenuItems();
        
        this.callParent(arguments);
    },

    _getMenuItems: function() {
        var record = this.getRecord(),
            records = this.records || [],
            items = [],
            popoverPlacement = this.popoverPlacement || Rally.ui.popover.Popover.DEFAULT_PLACEMENT;
        
        if ( records && records.length > 0 ) {
            // bulk edit
            items.push({
                xtype: 'tsremovetimeentrymenuitem',
                view: this.view,
                record: record,
                records: records
            });
           
        } else {
            if ( this.forModification ) {
                if ( record.get('__Appended') || record.get('__Amended')) {
                    items.push({
                        xtype: 'tsremovetimeentrymenuitem',
                        view: this.view,
                        record: record
                    });
                } else {
                    items.push({
                        xtype: 'tsaltertimeentrymenuitem',
                        view: this.view,
                        record: record
                    });
                }
            } else {
                items.push({
                    xtype: 'tsremovetimeentrymenuitem',
                    view: this.view,
                    record: record
                });
                
                if ( record.get('__Amended') || record.get('__Appended') ) {
                    items.push({
                        xtype: 'tsabsorbtimeentrymenuitem',
                        view: this.view,
                        record: record
                    });
                } else {
                    items.push({
                        xtype: 'tspintimeentrymenuitem',
                        view: this.view,
                        record: record
                    });
                    items.push({
                        xtype: 'tsunpintimeentrymenuitem',
                        view: this.view,
                        record: record
                    });
                    
                }
            }
                    
        }
        return items;
    }
});
/* for saving as default */

Ext.define('Rally.technicalservices.UnpinTimeEntryMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsunpintimeentrymenuitem',


    config: {
        text: 'Remove Default',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._unpinRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        return !record.isLocked() && record.isPinned() && !record.isDeleted();
    },
    _unpinRecord: function(record) {
        var timetable = this.view.ownerCt.ownerCt;
        
        timetable.unpinTime(record);
    },
    
    _unpinRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
        
        Ext.Array.each(records, function(record) {
            this._unpinRecord(record);
        },this);
    }
});
Ext.define('Rally.technicalservices.grid.TimeTableRowActionColumn', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.tstimetablerowactioncolumn',

    inheritableStatics: {
        getRequiredFetchFields: function(grid) {
            return (grid.enableBulkEdit && ['Project', 'Tags']) || [];
        }
    },
    
    /**
     * @property {Boolean} sortable False to disable sorting of this column
     *
     */
    sortable: false,
    /**
     * @property {Boolean} hideable False to disable hiding of column
     *
     */
    hideable: false,
    /**
     * @property {Boolean} resizable False to disable resizing of column
     *
     */
    resizable: false,
    /**
     * @property {Boolean} draggable False to disable reordering of a column
     *
     */
    draggable: false,
    /**
     * @property {Boolean} menuDisabled True to disable the column header menu containing sort/hide options
     *
     */
    menuDisabled: true,
    /**
     * 
     * @property {Boolean} forModification  True to show menu items for manager appending/changing of timesheet
     */
    forModification: false,
    
    /**
     * @property {Number}
     *
     */
    flex: -1,
    minWidth: Ext.isIE9 ? 22 : 26,
    maxWidth: Ext.isIE9 ? 22 : 26,

    /**
     * @property {Boolean}
     * This column should not show up on print pages that include a printable grid
     */
    printable: false,

    tdCls: 'rally-cell-row-action',
    cls: 'row-action-column-header',

    config: {
        /**
         * @cfg {Function} rowActionsFn
         * @params record {Ext.data.Record} The record to be assigned to record menu items
         * A list of Rally.ui.menu.Menu#items objects that will be used as the row action options
         * Each row action can contain a predicate property which will be evaluated to see if the row action should be included
         * Usage:
         *      [
         *          {text: 'Move...', record: record, handler: function(){  // move this.record  }}
         *      ]
         */
        rowActionsFn: null,

        /**
         * @cfg {Object} scope The scope that the rowActionsFn is called with
         */
        scope: null,
        
        canUnlock: false
    },

    constructor: function() {
        this.callParent(arguments);
        this.renderer = this._renderGearIcon;
    },

    initComponent: function() {
        this.callParent(arguments);
        this.on('click', this._showMenu, this);
    },

    onDestroy: function() {
        if (this.menu) {
            this.menu.destroy();
            delete this.menu;
        }

        this.callParent(arguments);
    },

    /**
     * @private
     * @param value
     * @param metaData
     * @param record
     */
    _renderGearIcon: function(value, metaData, record) {
        metaData.tdCls = Rally.util.Test.toBrowserTestCssClass('row-action', Rally.util.Ref.getOidFromRef(record.get('_ref')));
        return '<div class="row-action-icon icon-gear"/>';
    },

    /**
     * @private
     * @param view
     * @param el
     */
    _showMenu: function(view, el) {
        var selectedRecord = view.getRecord(Ext.fly(el).parent("tr")),
            checkedRecords = view.getSelectionModel().getSelection(),
            grid = view.panel,
            defaultOptions;

        defaultOptions = {
            view: view,
            record: selectedRecord,
            records: checkedRecords,
            owningEl: el.parentElement,
            popoverPlacement: ['bottom', 'top'],
            canUnlock: this.canUnlock,
            forModification: this.forModification
        };

        if (this.rowActionsFn) {
            this.menu = Ext.create('Rally.technicalservices.TimeEntryRecordMenu', Ext.apply({
                items: this.rowActionsFn.call(this.scope || this, selectedRecord)
            }, defaultOptions));
        } else {
            this.menu = this._getDefaultRecordMenu(selectedRecord, defaultOptions);
        }

        this.menu.showBy(Ext.fly(el).down(".row-action-icon"));
    },

    _getDefaultRecordMenu: function(selectedRecord, defaultOptions) {
        var menu;
        var menuOptions = Ext.merge(defaultOptions, this.menuOptions || {});
        return Ext.create('Rally.technicalservices.TimeEntryRecordMenu', menuOptions);
    }
});
Ext.define('Rally.technicalservices.CommentDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tscommentdialog',

    height: 400,
    width: 600,
    layout: 'fit',
    closable: true,
    draggable: true,
    
    config: {
        title: 'Timesheet Comments',
        
        keyPrefix: null,
        
        preferences: null,
        
        defaultFocus: 'comment_field'
    },

    constructor: function(config) {
        this.mergeConfig(config);

        if ( Ext.isEmpty(this.config.keyPrefix) ) {
            throw "keyPrefix is required for the Comment Dialog";
        }
        
        if ( !Ext.isArray(this.config.preferences) ) {
            throw "preferences is required for the Comment Dialog";
        }
        
        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event commentAdded
             * Fires when user posts a new comment
             * @param {Rally.technicalservices.CommentDialog} source the dialog
             * @param {Ext.data.Model} new post comment
             */
            'commentAdded',
            /**
             * @event commentRemoved
             * Fires when user removes a new comment
             * @param {Rally.technicalservices.CommentDialog} source the dialog
             * @param {Ext.data.Model} old post comment
             */
            'commentRemoved'
        );
    },

    beforeRender: function() {
        this.callParent(arguments);
        
       this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: 'Close',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });
        
        this.addDocked({
            xtype: 'toolbar',
            itemId: 'add_box',
            dock: 'top',
            border: false,
            padding: 2,
            items: this._getAddBoxItems()
        });
        
        this.buildGrid();
    },

    _getColumns: function() {
        var columns = [];
        var can_delete = TSUtilities.currentUserIsAdmin();

        if ( can_delete ) {
            columns.push({
                xtype: 'tscommentrowactioncolumn',
                rowActionsFn: function(record,view) {
                    return [
                        {
                            text: 'Remove', 
                            record: record, 
                            view: view,
                            handler: function(){
                                var item = this.record;
                                var pref = this.record.get('Preference');
                                
                                if ( pref ) {
                                    if ( this.view && this.view.getStore() ) {
                                        this.view.getStore().remove(item);
                                        this.view.getStore().fireEvent('recordRemoved',this.view.getStore(), item);
                                    }
                                    pref.destroy();
                                }
                            }}
                    ]
                }
            });
        }
            
        return Ext.Array.push(columns,[
            {dataIndex: 'User', text:'User'},
            {dataIndex: 'Comment', text:'Comment', flex: 1},
            {dataIndex: 'CreationDate', text: 'Posted', renderer: function(value) { 
                return Ext.util.Format.date(value,'n/j/Y, g:i a')}
            }
        ]);
    },
    
    buildGrid: function() {
        if (this.grid) {
            this.grid.destroy();
        }

        var me = this;

        var data = Ext.Array.map(this.preferences, function(preference){
            var value = Ext.JSON.decode( preference.get("Value") );
            return {
                Comment: value.text,
                User: value.user._refObjectName,
                CreationDate: preference.get('CreationDate'),
                Preference: preference
            };
        });
                
        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            sorters: [{property:'CreationDate', direction:'DESC'}],
            listeners: {
                scope: this, 
                recordRemoved: function(store, record) {
                    this.fireEvent('commentRemoved', this, record.get('Preference'));
                }
            }
        });
        
        this.grid = Ext.create('Rally.ui.grid.Grid', {
            columnCfgs: this._getColumns(),
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            showRowActionsColumn: false,
            showPagingToolbar: false,
            store: store
        });

        this.add(this.grid);
    },
    
    _getAddBoxItems: function() {
        var can_post = TSUtilities.getEditableProjectForCurrentUser();

        var tooltip_text = "Posting requires Edit rights in at least one project";
        
        if ( can_post !== false && !Ext.isEmpty( can_post )) {
            can_post = true;
            tooltip_text = "Submit Comment";
        }
        
        return [
        {
            xtype: 'rallytextfield',
            itemId: 'comment_field',
            flex: 1,
            margin: 5
        },
        {
            xtype:'rallybutton',
            text: 'Post',
            disabled: !can_post,
            toolTipText: tooltip_text,
            listeners: {
                scope: this,
                click: this._postComment
            }
        }
        ];
    },
    
    _postComment: function() {
        var comment_field = this.down('#comment_field');
        
        var comment = comment_field.getValue();
        if ( Ext.isEmpty(comment) || Ext.isEmpty(Ext.String.trim(comment)) ) {
            return;
        }
        
        comment_field.setValue('');
        
        var current_user = Rally.getApp().getContext().getUser();

        var value = {
            text: comment,
            user: { 
                _type: 'User', 
                '_ref': current_user._ref, 
                '_refObjectName': current_user._refObjectName,
                'ObjectID': current_user.ObjectID
            }
        };
        
        var key = Ext.String.format("{0}.{1}",
            this.keyPrefix,
            Ext.util.Format.date( new Date(), 'time' )
        );
        
        this._makePreference(key,Ext.JSON.encode(value)).then({
            scope: this,
            success: function(results) {
                Ext.Array.push(this.preferences, results);
                this.buildGrid();
            },
            failure: function(msg) {
                Ext.Msg.alert("Cannot Create Comment", msg);
            }
        });
    },
    
    _makePreference: function(key,value) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {

                var pref_config = {
                    Name: key,
                    Value: value,
                    Project: TSUtilities.getEditableProjectForCurrentUser()
                }

                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            me.fireEvent('commentAdded',this,result);
                            deferred.resolve([result]);
                        } else {
                            deferred.reject(operation.error.errors[0]);
                        }
                    }
                });
            }
        });
        return deferred.promise;
    }
    
});
Ext.define('Rally.technicalservices.grid.comments.RowActionColumn', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.tscommentrowactioncolumn',
    
    /**
     * @property {Boolean} sortable False to disable sorting of this column
     *
     */
    sortable: false,
    /**
     * @property {Boolean} hideable False to disable hiding of column
     *
     */
    hideable: false,
    /**
     * @property {Boolean} resizable False to disable resizing of column
     *
     */
    resizable: false,
    /**
     * @property {Boolean} draggable False to disable reordering of a column
     *
     */
    draggable: false,
    /**
     * @property {Boolean} menuDisabled True to disable the column header menu containing sort/hide options
     *
     */
    menuDisabled: true,
    /**
     * @property {Number}
     *
     */
    flex: -1,
    minWidth: Ext.isIE9 ? 22 : 26,
    maxWidth: Ext.isIE9 ? 22 : 26,

    /**
     * @property {Boolean}
     * This column should not show up on print pages that include a printable grid
     */
    printable: false,

    tdCls: 'rally-cell-row-action',
    cls: 'row-action-column-header',

    config: {
        /**
         * @cfg {Function} rowActionsFn
         * A list of Rally.ui.menu.Menu#items objects that will be used as the row action options
         * Each row action can contain a predicate property which will be evaluated to see if the row action should be included
         * Usage:
         *  rowActionsFn: function(record) {
         *      return [
         *           {text: 'Remove', record: record, handler: function(){ console.log('record:', this.record); } }
         *      ]
         *   }
         */
        rowActionsFn: null,

        /**
         * @cfg {Object} scope The scope that the rowActionsFn is called with
         */
        scope: null,
        
        canUnlock: false
    },

    constructor: function() {
        this.callParent(arguments);
        this.renderer = this._renderGearIcon;
    },

    initComponent: function() {
        this.callParent(arguments);
        this.on('click', this._showMenu, this);
    },

    onDestroy: function() {
        if (this.menu) {
            this.menu.destroy();
            delete this.menu;
        }

        this.callParent(arguments);
    },

    /**
     * @private
     * @param value
     * @param metaData
     * @param record
     */
    _renderGearIcon: function(value, metaData, record) {
        metaData.tdCls = Rally.util.Test.toBrowserTestCssClass('row-action', Rally.util.Ref.getOidFromRef(record.get('_ref')));
        return '<div class="row-action-icon icon-gear"/>';
    },

    /**
     * @private
     * @param view
     * @param el
     */
    _showMenu: function(view, el) {
        var selectedRecord = view.getRecord(Ext.fly(el).parent("tr")),
            checkedRecords = view.getSelectionModel().getSelection(),
            grid = view.panel,
            defaultOptions;

        defaultOptions = {
            view: view,
            record: selectedRecord,
            records: checkedRecords,
            owningEl: el.parentElement,
            popoverPlacement: ['bottom', 'top'],
            canUnlock: this.canUnlock
        };

        if (this.rowActionsFn) {
            var config = Ext.apply({
                items: this.rowActionsFn.call(this.scope || this, selectedRecord, view)
            }, defaultOptions);
            
            this.menu = Ext.create('Rally.ui.menu.Menu', config);
        } else {
            this.menu = this._getDefaultRecordMenu(selectedRecord, defaultOptions);
        }

        this.menu.showBy(Ext.fly(el).down(".row-action-icon"));
    },

    _getDefaultRecordMenu: function(selectedRecord, defaultOptions) {
        var menu;
        var menuOptions = Ext.merge(defaultOptions, this.menuOptions || {});
        return Ext.create('Rally.technicalservices.RecordMenu', menuOptions);
    }
});
/**
 * A dialog that displays artifacts to choose from
 *
 */
Ext.define('Rally.technicalservices.ChooserDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    alias:'widget.tschooserdialog',

    clientMetrics: [{
        beginEvent:'beforeshow',
        endEvent:'show',
        description:'dialog shown'
    }],

    width: 800,
    closable: true,

    searchContext: 'project',
    
    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Choose an Artifact',
        /**
         * @cfg {Array} (required)
         * List of artifact types to allow the user to choose from
         */
        artifactTypes: [],
        /**
         * @cfg {Boolean}
         * Allow multiple selection or not
         */
        multiple: false,

        /**
         * @cfg {Object}
         * An {Ext.data.Store} config object used when building the grid
         * Handy when you need to limit the selection with store filters
         */
        storeConfig: { },

        /**
         * @cfg {Object}
         * The list of filter configs that will appear in the filter combobox
         * Each list element should include a displayName and an attributeName property,
         * where the attributeName is the name of wsapi queryable attribute:
         *     {
         *         displayName: 'Formatted ID',
         *         attributeName: 'FormattedID'
         *     }
         */
        filterableFields: [],

        /**
         * @cfg {Ext.grid.Column}
         * List of columns that will be used in the chooser
         */
        columns : [],

        /**
         * @cfg [{String}]
         * List of field names to fetch when getting the objects
         */
        fetchFields: [],
        
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done',

        /**
         * @cfg {Object}
         * The grid configuration to be used when creative the grid of items in the dialog
         */
        gridConfig: {},

        /**
         * @cfg {String}
         * The ref of a record to select when the chooser loads
         */
        selectedRef: undefined

        /**
         * @private
         * @cfg userAction {String} (Optional)
         * The client metrics action to record when the user makes a selection and clicks done
         */
    },

    items: {
        xtype: 'panel',
        border: false,
        items: [
            {
                xtype: 'container',
                itemId: 'gridContainer',
                layout: 'fit',
                height: 400
            }
        ]
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event artifactChosen
             * Fires when user clicks done after choosing an artifact
             * @param {Rally.technicalservices.ChooserDialog} this dialog
             * @param {Rally.domain.WsapiModel} selected record or an array of selected records if multiple is true
             */
            'artifactChosen'
        );

        this.addCls('chooserDialog');

        this._buildButtons();
        this._buildSearchBar();

        Rally.data.ModelFactory.getModels({
            types: this.artifactTypes,
            success: function(models) {

                if (this.artifactTypes.length > 1) {
                    this._setupComboBox(models);
                }

                this._buildGrid(models[this.artifactTypes[0]]);

            },
            scope: this
        });

    },

    /**
     * @private
     */
    _buildButtons: function() {

        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        var selectedRecords = this._getSelectedRecords();
                        if (!this.multiple) {
                            selectedRecords = selectedRecords[0];
                        }
                        this.fireEvent('artifactChosen', this, selectedRecords);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

    },

    /**
     * @private
     */
    _buildSearchBar: function() {

        var filterTypeComboBox = Ext.create('Ext.form.field.ComboBox', {
            itemId: 'filterTypeComboBox',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['attributeName', 'displayName'],
                data: this.filterableFields
            }),
            displayField: 'displayName',
            valueField: 'attributeName',
            editable: false
        });

        filterTypeComboBox.select(filterTypeComboBox.getStore().getAt(1));

        this.addDocked({
            xtype: 'toolbar',
            itemId: 'searchBar',
            dock: 'top',
            items: [
                filterTypeComboBox,
                {
                    xtype: 'textfield',
                    itemId: 'searchTerms',
                    emptyText: 'enter search terms',
                    flex: 1,
                    enableKeyEvents: true,
                    listeners: {
                        keyup: function(textField, event) {
                            if (event.getKey() === Ext.EventObject.ENTER) {
                                this._search();
                            }
                        },
                        scope: this
                    }
                },
                {
                    xtype: 'button',
                    text: '<span class="icon-search"> </span>',
                    handler: this._openSearchMenu,
                    scope: this
                }
            ]
        });
    },
    
    /**
     * @private
     * @param {Object} models Object with {Rally.domain.WsapiModel} items
     *
     */
    _setupComboBox: function(models) {
        var searchBar = this.down('#searchBar');
        var combo = Ext.create('Ext.form.field.ComboBox', {
            xtype: 'combo',
            name: 'filterType',
            queryMode: 'local',
            store: Ext.create('Ext.data.Store', {
                fields: ['typeName', 'displayName', 'wsapiModel']
            }),
            displayField: 'displayName',
            valueField: 'typeName',
            editable: false
        });
        searchBar.insert(0, combo);

        Ext.Object.each(models, function(key, model) {
            combo.getStore().add({
                typeName: model.typePath,
                displayName: model.displayName,
                wsapiModel: model
            });
        }, this);

        combo.select(combo.getStore().getAt(0));

        combo.on('select', function(comboBox, options) {
            var option = options[0];
            this.grid.reconfigureWithModel(option.get('wsapiModel'));
        }, this);

    },

    /**
     * @private
     * @param {Rally.domain.WsapiModel}
     *
     */
    _buildGrid: function(model) {

        var mode = this.multiple ? 'MULTI' : 'SINGLE';
        this.selectionModel = Ext.create('Rally.ui.selection.CheckboxModel', {
            mode: mode,
            allowDeselect: true
        });

        var store_config = this.storeConfig;
        store_config.context = { project: Rally.getApp().getContext().getProjectRef()};
        
        var new_fetch = Ext.Array.merge(['ObjectID'],this.fetchFields);
        var current_fetch = store_config.fetch || [];
        
        store_config.fetch = Ext.Array.merge(new_fetch,current_fetch);
        
        var gridConfig = Ext.Object.merge({
            model: model,
            selModel: this.selectionModel,
            autoAddAllModelFieldsAsColumns: false,
            enableEditing: false,
            enableColumnHide: false,
            enableColumnMove: false,
            columnCfgs: this.columns,
            storeConfig: store_config,
            showRowActionsColumn: false,
            viewConfig: {
                emptyText: Rally.ui.EmptyTextFactory.get('defaultText')
            }
        }, this.config.gridConfig);

        this.grid = Ext.create('Rally.ui.grid.Grid', gridConfig);
        this.mon(this.grid, 'load', this._onGridLoad, this);
        this.down('#gridContainer').add(this.grid);
        this._onGridReady();
    },

    _onGridReady: function() {
        if (!this.grid.rendered) {
            this.mon(this.grid, 'afterrender', this._onGridReady, this, {single: true});
            return;
        }

        if (this.grid.getStore().isLoading()) {
            this.mon(this.grid, 'load', this._onGridReady, this, {single: true});
            return;
        }

        this._onGridLoad();
        this.center();

        if (Rally.BrowserTest) {
            Rally.BrowserTest.publishComponentReady(this);
        }
    },

    _onGridLoad: function() {
        if(this.getSelectedRef()){
            var recordIndex = this.grid.getStore().find('_ref', this.getSelectedRef());
            if(recordIndex !== -1){
                var record = this.grid.getStore().getAt(recordIndex);
                this.grid.getSelectionModel().select(record);
            }
        }
    },

    /**
     * @private
     * @return {Rally.data.Model}
     */
    _getSelectedRecords: function() {
        return this.selectionModel.getSelection();
    },

    /**
     * @private
     */
    _search: function() {
        
        var terms = this.down('#searchTerms').getValue();
        var filterBy = this.down('#filterTypeComboBox').getValue();
        var filter;
        
        var store_config = this.grid.storeConfig;
        
        store_config.context = { project: Rally.getApp().getContext().getProjectRef() };
        
        if ( this.searchContext == "workspace" ) {
            store_config.context = { project: null };
        }
        
        var store = this.grid.getStore();        
        store.context = store_config.context;
        
        if (!Ext.isEmpty(terms)) {
            filter = Ext.create('Rally.data.wsapi.Filter', {
                property: filterBy,
                value: terms,
                operator: 'Contains'
            });
        }

        this.grid.filter(filter, true);
    },

    _openSearchMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                { 
                    text: 'Search Selected Project',
                    handler: function() {
                        this.searchContext = 'project';
                        this._search();
                    },
                    scope: this
                },
                { 
                    text: 'Search Everywhere',
                    handler: function() {
                        this.searchContext = 'workspace';
                        this._search();
                    },
                    scope: this
                }
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    }
});

Ext.define('Rally.technicalservices.CommentButton',{
    extend: 'Rally.ui.Button',
    requires: [
        'TSUtilities',
        'TSDateUtils',
        'Rally.technicalservices.CommentDialog'
    ],
    
    alias: 'widget.tscommentbutton',
    
    config: {
        keyPrefix: null
    },
    
    constructor:function (config) {
        this.mergeConfig(config);
        if ( Ext.isEmpty(this.config.keyPrefix) ) {
            throw "keyPrefix is required for the Comment Button";
        }

        this.config.text = Ext.String.format("<span class='icon-comment'>{0}</span>", config.text || "");
        
        this.callParent([this.config]);
    },
    
    afterRender: function() {
        this.callParent(arguments);

        this.setDisabled(true);
        
        this._getComments().then({
            scope: this,
            success: function(results) {
                this.comments = results;
                this._setResultCount();
                
                this.mon(this.el, this.clickEvent, this._showDialog, this);
                this.setDisabled(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading comments', msg);
            }
        });
    },
    
    _setResultCount: function() {
        var count = this.comments.length;
        var text = "";
        if ( count === 0 ) {
            text = Ext.String.format("<span class='icon-comment'>{0}</span>", "");
        } else {
            text = Ext.String.format("<span class='icon-comment'></span> {0}", count);
        }
        this.setText(text);
    },
    
    _getComments: function() {
        var key = this.keyPrefix;
        
        var config = {
            model:'Preference',
            filters: [{property:'Name',operator:'contains', value:key}],
            fetch: ['Name','Value','CreationDate']
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _showDialog: function() {
        Ext.create('Rally.technicalservices.CommentDialog',{
            autoShow: true,
            keyPrefix: this.keyPrefix,
            preferences: this.comments,
            listeners: {
                scope: this,
                commentAdded: function(dialog,comment) {
                    this.comments = Ext.Array.merge(this.comments,comment);
                    this._setResultCount();
                },
                commentRemoved: function(dialog, comment) {
                    this.comments = Ext.Array.remove(this.comments,comment);
                    this._setResultCount();
                }
            }
        });
    }
});
Ext.define('TSDefaultPreference',{
    extend: 'Ext.data.Model',
        
    fields: [
        { name: '__Preference', type:'object' },
        { name: 'Name', type: 'string', convert: function(value,record) {
            if ( ! Ext.isEmpty(value) ) { return value; }
            
            if ( record && !Ext.isEmpty(record.get('__Preference'))) {
                return record.get('__Preference').get('Name');
            } else {
                return Ext.String.format("{0}.{1}", 
                    TSUtilities.pinKeyPrefix,
                    Rally.getApp().getContext().getUser().ObjectID
                );
            }
        }},
        { name: 'Value', type:'string', convert: function(value, record) {
            if ( ! Ext.isEmpty(value) ) { return value; }

            if ( record && !Ext.isEmpty(record.get('__Preference'))) {
                return record.get('__Preference').get('Value');
            }
            return null;
        }}
    ],
    
    addPin: function(record) {
        var task = record.get('Task');
        var workproduct = record.get('WorkProduct');
        
        var target_record_oid = workproduct.ObjectID;
        var type = workproduct._type;
        
        if ( !Ext.isEmpty(task) ) {
            target_record_oid = task.ObjectID;
            type = 'task';
        }
        
        var target_record_item = {
            type: type,
            ObjectID: target_record_oid
        };
        
        var pinned_items = Ext.Array.merge(this.getPinnedItems(), [target_record_item]);
                
        this.set('Value', Ext.JSON.encode(pinned_items) );
        
        return this.save();
    },
    
    removePin: function(record) {
        
        var record_type = record.get('_type');
        var name = "";
        var target_record_oid = -1;
        
        if ( record_type == 'hierarchicalrequirement' || record_type == 'defect' || record_type == 'task' ) {
            name = record.get('Name');
            target_record_oid = record.get('ObjectID');
        } else {
            var task = record.get('Task');
            var workproduct = record.get('WorkProduct');
                        
            target_record_oid = workproduct.ObjectID;
            name = workproduct._refObjectName;
            
            if ( !Ext.isEmpty(task) ) {
                target_record_oid = task.ObjectID;
                name = task._refObjectName;
            }
        }
        
        var pinned_items = Ext.Array.filter(this.getPinnedItems(), function(item) {
            var oid = item.ObjectID;
            console.log('comparing ', oid, target_record_oid);
            
            return ( oid != target_record_oid );
        });
        
        this.set('Value', Ext.JSON.encode(pinned_items) );

        Rally.ui.notify.Notifier.show({message: 'Removed Default Item: ' + name});
        
        return this.save();
    },
    
    isPinned: function(record) {
        var task = record.get('Task');
        var workproduct = record.get('WorkProduct');
        
        // deleted items don't have a workproduct
        if ( Ext.isEmpty(workproduct) ) { return false; }
        
        var target_record_oid = workproduct.ObjectID;
        if ( !Ext.isEmpty(task) ) {
            target_record_oid = task.ObjectID;
        }
        
        return Ext.Array.contains(this.getPinnedOIDs(), target_record_oid);
    },
    
    getPinnedItems: function() {
        var value = this.get('Value');
        if ( Ext.isEmpty(value) ) {
            return [];
        }
        
        return Ext.JSON.decode(value);
    },
    
    getPinnedOIDs: function() {
        var item_array = this.getPinnedItems();
        return Ext.Array.map(item_array, function(item) { return item.ObjectID; });
    },
    
    save: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var pref = this.get('__Preference'); 
        
        if ( Ext.isEmpty(pref)) {
            return this.createPreference(); 
        } else {
            pref.set('Value', me.get('Value'));
            
            pref.save({
                callback: function(result, operation) {
                    if(operation.wasSuccessful()) {
                        me.set('__Preference', result);
                        deferred.resolve(me);
                    } else {
                        deferred.reject(operation.error.errors[0]);
                    }
                }
            });
        }
        
        return deferred.promise;
    },
    
    createPreference: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        console.log('createPreference', me.get('Name'));
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {
                var pref_config = {
                    Name:    me.get('Name'),
                    Value:   me.get('Value'),
                    Project: TSUtilities.getPreferenceProject()
                }

                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            me.set('__Preference', result);
                            console.log('preference created', me.get('Name'));
                            deferred.resolve(me);
                        } else {
                            deferred.reject(operation.error.errors[0]);
                        }
                    }
                });
            }
        });
        
        return deferred.promise;
    }
});
Ext.define('Rally.technicalservices.TimeModelBuilder',{
    singleton: true,

    deploy_field: 'c_IsDeployed',
    
    appendKeyPrefix: 'rally.technicalservices.timesheet.append',
    amendKeyPrefix: 'rally.technicalservices.timesheet.amend',

    days: ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
    
    build: function(modelType, newModelName) {
        var deferred = Ext.create('Deft.Deferred');

        var oid_sort = function(v) {
            if ( Ext.isEmpty(v) ) {
                return -1;
            }
            return v.ObjectID;
        };
        
        var name_sort = function(v) {            
            if ( Ext.isEmpty(v) ) {
                return "";
            }
            return v._refObjectName;
        };
        
        Rally.data.ModelFactory.getModel({
            type: modelType,
            scope: this,
            success: function(model) {
                var base_fields = model.getFields();
                
                var wp = model.getField('WorkProduct');
                wp.sortType = oid_sort;
                var task = model.getField('Task');
                task.sortType = oid_sort;
                
                var related_fields = [
                    { name: '__TimeEntryItem', type:'object' },
                    { name: '__Feature',   type: 'object', sortType: oid_sort},
                    { name: '__Release',   type: 'object', sortType: name_sort },
                    { name: '__Product',   type: 'object', sortType: name_sort },
                    { name: '__Total',     type: 'float', defaultValue: 0 },
                    { name: '__SecretKey', type:'auto', defaultValue: 1 },
                    { name: '__Appended', type: 'boolean', defaultValue: false },
                    { name: '__Amended', type: 'boolean', defaultValue: false },
                    { name: '__PrefID', type:'auto', defaultValue: -1 },
                    { name: '_ReleaseLockFieldName',  type:'string', defaultValue: Rally.technicalservices.TimeModelBuilder.deploy_field },
                    { name: '__Pinned', type: 'boolean' }
                ];
                
                var day_fields = this._getDayFields();
                
                var all_fields = Ext.Array.merge(base_fields, day_fields, related_fields);
                
                var new_model = Ext.define(newModelName, {
                    extend: 'Ext.data.Model',
                    fields: all_fields,
                    addTimeEntryValue: this._addTimeEntryValue,
                    _updateTotal: this._updateTotal,
                    _days: this.days,
                    save: this._save,
                    _saveAsPref: this._saveAsPref,
                    _savePreference: this._savePreference,
                    _saveChangesWithPromise: this._saveChangesWithPromise,
                    getField: this.getField,
                    clearAndRemove: this.clearAndRemove,
                    isLocked: this._isLocked,
                    isPinned: this._isPinned,
                    isDeleted: this._isDeleted,
                    _saveTEV: this._saveTEV,
                    _createTEV: this._createTEV
                });
                
                this.model = new_model;
                
                deferred.resolve(new_model);
            }
        });
        return deferred;
    },
    
    getFetchFields: function() {
        return [ 'ObjectID', 'Name', 'Release', 'User', 'UserName', this.deploy_field ];
    },
    
    _isPinned: function() {
        return this.get('__Pinned');
    },
    
    _isDeleted: function() {
        if ( Ext.isEmpty(this.get('WorkProduct') )) {
            return true;
        }
        
        return ( Ext.isEmpty(this.get('Task')) && !Ext.isEmpty(this.get('TaskDisplayString')));
        
    },
    
    _isLocked: function (fieldName, newValue) {
        var release = this.get('__Release');
        var lock_field_name = this.get('_ReleaseLockFieldName');
                
        if ( Ext.isEmpty(release) || Ext.isEmpty(lock_field_name) ) {
            return false;
        }
        
        return release[lock_field_name];
    },
    
    clearAndRemove: function() {        
        var timeentryitem = this.get('__TimeEntryItem');
        var cells_to_clear = ['__Monday','__Tuesday','__Wednesday','__Thursday','__Friday','__Saturday','__Sunday','__Total'];
        var me = this;
                
        var key = Ext.String.format("{0}.{1}.{2}.{3}", 
            TSUtilities.deletionKeyPrefix,
            TSDateUtils.formatShiftedDate(this.get('WeekStartDate'),'Y-m-d'),
            this.get('User').ObjectID,
            new Date().getTime()
        );
                
        var data = this.getData();
        
        delete data.__TimeEntryItem;
        
        Ext.Array.each(cells_to_clear, function(cell_to_clear) {
            delete data[cell_to_clear + "_record"];
        });

        var value = Ext.JSON.encode(data);
                
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {

                var pref_config = {
                    Name: key,
                    Value: value,
                    Project: TSUtilities.getPreferenceProject()
                }

                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(deleted_pref, operation) {                        
                        if(operation.wasSuccessful()) {
                            Ext.Array.each(cells_to_clear, function(cell_to_clear){
                                me.set(cell_to_clear,0);
                            },me);
                            
                            if ( me.get('__PrefID') > 0 ) {
                                // destroy the preference
                                var oid = me.get('__PrefID');
                                
                                Rally.data.ModelFactory.getModel({
                                    type: 'Preference',
                                    success: function(model) {
                                        model.load(oid, {
                                            fetch: ['Name', 'ObjectID', 'Value'],
                                            callback: function(result, operation) {
                                                if(operation.wasSuccessful()) {
                                                    result.destroy();
                                                }
                                            }
                                        });
                                    }
                                });
                                
                            } else {
                                console.log("Does not have an existing pref ID", this);
                                if ( ! Ext.isEmpty(timeentryitem) && timeentryitem.data.ObjectID > 0 ){
                                    timeentryitem.destroy();
                                }
                            }
                            me.destroy();
                        } else {
                            Ext.Msg.alert('Problem removing', operation.error.errors[0]);
                        }
                    }
                });
            }
        });
    },
    
    _saveAsPref: function() {
        var me = this;
        var item = this.get('Task') || this.get('WorkProduct');
        var prefix = Rally.technicalservices.TimeModelBuilder.appendKeyPrefix;
        if ( this.get('__Amended') ) {
            prefix = Rally.technicalservices.TimeModelBuilder.amendKeyPrefix;
        }
        var key = Ext.String.format("{0}.{1}.{2}.{3}", 
            prefix,
            TSDateUtils.formatShiftedDate(this.get('WeekStartDate'),'Y-m-d'),
            this.get('User').ObjectID,
            item.ObjectID
        );
        
        var value = Ext.JSON.encode(this.getData());
        var project_oid = this.get('Project').ObjectID;
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {

                var pref_config = {
                    Name: key,
                    Value: value,
                    Project: TSUtilities.getPreferenceProject()
                }

                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            me.set('ObjectID', result.get('ObjectID'));
                            me.set('__PrefID', result.get('ObjectID'));
                        } else {
                            Ext.Msg.alert('Problem amending', operation.error.errors[0]);
                        }
                    }
                });
            }
        });
    },
    
    _savePreference: function(changes) {
        var oid = this.get('__PrefID');
        var me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {
                model.load(oid, {
                    fetch: ['Name', 'ObjectID', 'Value'],
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            result.set('Value', Ext.JSON.encode(me.getData()));
                            result.save({
                                callback: function(result, operation) {
                                    if(operation.wasSuccessful()) {
                                        console.log('saved:', me);
                                    } else {
                                        Ext.Msg.alert('Problem saving change', operation.error.errors[0]);
                                    }
                                }
                            });
                        }
                    }
                });
            }
        });
        
    },
    
    _saveTEV: function(src) {
        var deferred = Ext.create('Deft.Deferred');

        src.save({
            callback: function() {
                deferred.resolve();
            }
        });
        return deferred.promise;
    },
    
    _createTEV: function(src_field_name, row, time_entry_item, index, value, week_start, date_val) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryValue',
            scope: this,
            success: function(tev_model) {
                var fields = tev_model.getFields();
                Ext.Array.each(fields, function(field,idx) {
                    if ( field.name == "TimeEntryItem" ) {
                        field.readOnly = false;
                        field.persist = true;
                        field.type = 'string';                        
                    }
                    if ( field.name == "DateVal" ) {
                        // override field definition so that we can write to the 
                        // field AND pass it a string for midnight at Z instead of
                        // the local timestamp
                        fields[idx] = Ext.create('Rally.data.wsapi.Field',{
                            type:'string',
                            readOnly: false,
                            persist: true,
                            name: 'DateVal',
                            custom: false,
                            hidden: false,
                            useNull: false
                            
                        });
                    }
                    
                });
                
                src = Ext.create(tev_model,{
                    Hours: value,
                    TimeEntryItem: { _ref: time_entry_item.get('_ref') },
                    DateVal: TSDateUtils.pretendIMeantUTC(date_val,true)
                });

                src.save({
                    callback: function(result, operation) {
                        
                        if(operation.wasSuccessful()) {
                            row.set(src_field_name, result);
                            me._updateTotal();
                            deferred.resolve();    
                        } else {
                            row.set(src_field_name, null);
                            console.log('Operation:',operation);
                            throw 'Problem saving time entry value';
                            deferred.reject(operation.error && operation.error.errors.join('.'));
                        }
                    }
                });

            }
        });
        
        return deferred.promise;
    },
    
    _saveChangesWithPromise: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var changes = this.getChanges();

        me.modified = {}; // stop repeating the same change
        
        var promises = [];
        Ext.Object.each(changes, function(field_name, value) {
            var row = this;
            var field = row.getField(field_name);
            var src_field_name = field.__src;
                        
            if ( ! Ext.isEmpty(src_field_name) ) {
                // this is a field that belongs to another record
                var src = this.get(src_field_name);
                
                if ( !Ext.isEmpty(src) ) {
                    // the other record exists
                    src.set('Hours', value);
                    // TODO: check for errors on return 
                    me._updateTotal();
                    
                    promises.push(function() { return me._saveTEV(src) });
                    
                } else {
                    // need to create a new record
                    var time_entry_item = this.get('__TimeEntryItem');
                    var index = field.__index;
                    var week_start = time_entry_item.get('WeekStartDate');
                    var date_val = Rally.util.DateTime.add(week_start, 'day', index);
                    
                    // shift date if missed the right day of the week
                    var date_val_index = date_val.getDay();
                    var delta = index - date_val.getDay(); 
                    if ( delta == -6 ) { delta = 1; } // shift to Sunday
                    date_val = Rally.util.DateTime.add(date_val, 'day', delta);

                    promises.push(function() { return me._createTEV(src_field_name, row, time_entry_item, index, value, week_start, date_val); });
                }
            }
        },this);
                
        if ( promises.length === 0 ) { 
            deferred.resolve(); 
            return deferred;
        }
        
        this.process = Deft.Chain.sequence(promises).then({
            success: function(result) { 
                deferred.resolve(result);
            },
            failures: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred;
    },
    
    _save: function(v) { 
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            

        if ( ( this.get('__Amended') || this.get('__Appended') ) && this.get('ObjectID') == -1 ) {
            this._saveAsPref();
        }
        
        if ( this.get('__Appended') || this.get('__Amended') ) {
            this._savePreference(changes);
            return;
        }
        
        // tabbing too quickly gets us in a hole
        if ( this.process && this.process.getState() == 'pending' ) {
            
            this.process.then({
                scope: this,
                success: function(results) {
                    deferred = this._saveChangesWithPromise();
                },
                failure: function(msg) {
                    deferred.reject(msg);
                }
            });
            
        } else {
            
            this._saveChangesWithPromise().then({
                scope: this,
                success: function(result) {
                    deferred.resolve(result);
                },
                failure: function(msg) {
                    deferred.reject(msg);
                }
            });
        }
        
        return deferred.promise;
        
    },
    
    getField: function(field_name) {
        var fields = this.fields.items;
        var field = null;
        
        Ext.Array.each(fields, function(f) {
            if ( f.name == field_name || f.displayName == field_name ) {
                field = f;
            }
        });
        return field;
    },
    
    _updateTotal: function() {
        var total = 0;
        Ext.Array.each(this._days, function(day){
            var value = this.get(Ext.String.format('__{0}',day)) || 0;
            total += value;
        },this);
        this.set('__Total', total);
    },
    
    _addTimeEntryValue: function(value_item) {
        var value_day = value_item.get('DateVal').getUTCDay();
        var value_hours = value_item.get('Hours');
        
        var value_day_name = Rally.technicalservices.TimeModelBuilder.days[value_day];
        
        var day_number_field_name = Rally.technicalservices.TimeModelBuilder._getDayNumberFieldName(value_day_name);
        var day_record_field_name = Rally.technicalservices.TimeModelBuilder._getDayRecordFieldName(value_day_name);
        
        this.set(day_number_field_name, value_hours);
        this.set(day_record_field_name, value_item);
        
        this._updateTotal();
        
        // don't try to write these back when we're first getting them out of the system
        this.dirty = false;
        this.modified = [];
    },
    
    _getDayNumberFieldName: function(day_name) {
        return Ext.String.format('__{0}',day_name);
    },
    
    _getDayRecordFieldName: function(day_name) {
        return Ext.String.format('__{0}_record',day_name);
    },
    
    _getDayFields: function() {
        var me = this;
        
        var day_number_fields =  Ext.Array.map(this.days, function(day,idx) {
            return {
                name: me._getDayNumberFieldName(day),
                type: 'auto',
                defaultValue: 0,
                __src: me._getDayRecordFieldName(day),
                __index: idx
            }
        });
        
        var day_record_fields =  Ext.Array.map(this.days, function(day) {
            return {
                name: me._getDayRecordFieldName(day),
                type: 'object',
                defaultValue: null
            }
        });
        
        return Ext.Array.merge(day_number_fields, day_record_fields);
        
    }
});
Ext.override(Rally.ui.grid.plugin.Validation, {
    _onBeforeEdit: function(editor, object, eOpts) {
        // clear this because it won't let us do the getEditor on cells
    }
});

/**
 */

Ext.define('Rally.technicalservices.TimeTable', {
    extend: 'Ext.Container',
    alias: 'widget.tstimetable',

    mixins: ['Ext.state.Stateful'],

    logger: new Rally.technicalservices.Logger(),

    rows: [],
    columns: null,

    /**
     * @property {String} cls The base class applied to this object's element
     */
    cls: "tstimetable",

    time_entry_item_fetch: ['WeekStartDate', 'WorkProductDisplayString', 'WorkProduct', 'Task',
        'TaskDisplayString', 'Feature', 'Project', 'ObjectID', 'Name', 'Release'
    ],

    config: {
        startDate: null,
        editable: true,
        timesheet_user: null,
        timesheet_status: null,
        manager_field: null,
        week_locked: false
    },

    stateId: 'ca.technicalservices.extended.timesheet.columns',
    stateful: true,
    stateEvents: ['columnresize'],
    /*
        getState: function() {
            var me = this,
                state = null;

            state = {
                columns: this.columns
            };

            return state;
        },

        applyState: function(state) {
            if (state) {
                Ext.apply(this, state);
            }
        },
        */

    constructor: function(config) {
        this.mergeConfig(config);

        if (Ext.isEmpty(config.startDate) || !Ext.isDate(config.startDate)) {
            throw "Rally.technicalservices.TimeTable requires startDate parameter (JavaScript Date)";
        }
        this.callParent([this.config]);
    },

    initComponent: function() {
        var me = this;
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event
             * Fires when the grid has been rendered
             * @param {Rally.technicalservices.TimeTable} this
             * @param {Rally.ui.grid.Grid} grid
             */
            'gridReady'
        );

        this.startDateString = TSDateUtils.getBeginningOfWeekISOForLocalDate(this.startDate, true);

        this.logger.log("Week Start: ", this.startDate, this.startDateString);

        if (Ext.isEmpty(this.timesheet_user)) {
            this.timesheet_user = Rally.getApp().getContext().getUser();
        }

        Deft.Chain.sequence([
            me._getTEIModel,
            function() { return Rally.technicalservices.TimeModelBuilder.build('TimeEntryItem', 'TSTableRow'); }
        ], this).then({
            scope: this,
            success: function(model) {
                this._updateData();
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem creating model', msg);
            }
        });
    },

    _getTEIModel: function() {
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'TimeEntryItem',
            scope: this,
            success: function(model) {
                this.tei_model = model;
                deferred.resolve(model);
            }
        });
        return deferred.promise;
    },

    _updateData: function() {
        this.setLoading('Loading time...');
        var me = this;

        Deft.Chain.sequence([
            this._loadTimeEntryItems,
            this._loadTimeEntryValues,
            this._loadTimeEntryAppends,
            this._loadTimeEntryAmends,
            this._loadDefaultPreference
        ], this).then({
            scope: this,
            success: function(results) {
                var time_entry_items = results[0];
                var time_entry_values = results[1];
                var time_entry_appends = results[2];
                var time_entry_amends = results[3];
                var time_default_preference = results[4];

                this.timePreference = Ext.create('TSDefaultPreference');

                if (time_default_preference.length > 0) {
                    this.timePreference = Ext.create('TSDefaultPreference', { '__Preference': time_default_preference[0] });
                }
                this.logger.log('Time preference: ', this.timePreference);

                var rows = Ext.Array.map(time_entry_items, function(item) {
                    var product = item.get('Project');

                    var workproduct = item.get('WorkProduct');
                    var feature = null;
                    var release = null;

                    if (!Ext.isEmpty(workproduct)) {
                        product = workproduct.Project;
                        if (workproduct.Feature) {
                            feature = workproduct.Feature;
                            product = feature.Project;
                        }
                    }

                    if (!Ext.isEmpty(workproduct) && workproduct.Release) {
                        release = workproduct.Release;
                    }

                    var data = {
                        __TimeEntryItem: item,
                        __Feature: feature,
                        __Product: product,
                        __Release: release,
                        __Pinned: me._isItemPinned(item)
                    };

                    return Ext.create('TSTableRow', Ext.Object.merge(data, item.getData()));
                });

                var rows = this._addTimeEntryValues(rows, time_entry_values);
                var appended_rows = this._getAppendedRowsFromPreferences(time_entry_appends);
                var amended_rows = this._getAmendedRowsFromPreferences(time_entry_amends);

                this.logger.log('TEIs:', time_entry_items);
                this.logger.log('Rows:', rows);
                this.logger.log('Appended Rows:', appended_rows);
                this.logger.log('Amended Rows:', amended_rows);

                this.rows = Ext.Array.merge(rows, appended_rows, amended_rows);
                this._makeGrid(this.rows);
                this.setLoading(false);
            }
        });

    },

    _getAppendedRowsFromPreferences: function(prefs) {
        return Ext.Array.map(prefs, function(pref) {
            var value = Ext.JSON.decode(pref.get('Value'));
            value.ObjectID = pref.get('ObjectID');
            value.__PrefID = pref.get('ObjectID');

            var row = Ext.create('TSTableRow', value);
            row.set('updatable', true); // so we can add values to the week 

            return row;
        });
    },

    _getAmendedRowsFromPreferences: function(prefs) {
        return Ext.Array.map(prefs, function(pref) {
            var value = Ext.JSON.decode(pref.get('Value'));
            value.ObjectID = pref.get('ObjectID');
            value.__PrefID = pref.get('ObjectID');

            var row = Ext.create('TSTableRow', value);
            row.set('updatable', true); // so we can add values to the week 

            return row;
        });
    },

    _addTimeEntryValues: function(rows, time_entry_values) {
        var rows_by_oid = {};

        Ext.Array.each(rows, function(row) { rows_by_oid[row.get('ObjectID')] = row; });

        Ext.Array.each(time_entry_values, function(value) {
            var parent_oid = value.get('TimeEntryItem').ObjectID;

            var row = rows_by_oid[parent_oid];
            row.addTimeEntryValue(value);
        });

        return rows;
    },

    _loadTimeEntryItems: function() {
        this.setLoading('Loading time entry items...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;
        if (!Ext.isEmpty(this.timesheet_user)) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var config = {
            model: 'TimeEntryItem',
            context: {
                project: null
            },
            fetch: Ext.Array.merge(Rally.technicalservices.TimeModelBuilder.getFetchFields(),
                this.time_entry_item_fetch, [this.manager_field]
            ),
            filters: [
                { property: 'WeekStartDate', value: this.startDateString },
                { property: 'User.ObjectID', value: user_oid }
            ]
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    _loadTimeEntryValues: function() {
        this.setLoading('Loading time entry values...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;
        if (!Ext.isEmpty(this.timesheet_user)) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var config = {
            model: 'TimeEntryValue',
            context: {
                project: null
            },
            fetch: ['DateVal', 'Hours', 'TimeEntryItem', 'ObjectID'],
            filters: [
                { property: 'TimeEntryItem.WeekStartDate', value: this.startDateString },
                { property: 'TimeEntryItem.User.ObjectID', value: user_oid }
            ]
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    _loadTimeEntryAppends: function() {
        this.setLoading('Loading time entry additions...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;

        if (!Ext.isEmpty(this.timesheet_user)) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var key = Ext.String.format("{0}.{1}.{2}",
            Rally.technicalservices.TimeModelBuilder.appendKeyPrefix,
            this.startDateString.replace(/T.*$/, ''),
            user_oid
        );

        var config = {
            model: 'Preference',
            context: {
                project: null
            },
            fetch: ['Name', 'Value', 'ObjectID'],
            filters: [
                { property: 'Name', operator: 'contains', value: key }
            ]
        };

        this.logger.log('finding by key', key);


        return TSUtilities.loadWsapiRecords(config);
    },

    _loadTimeEntryAmends: function() {
        this.setLoading('Loading time entry amendments...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;

        if (!Ext.isEmpty(this.timesheet_user)) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var key = Ext.String.format("{0}.{1}.{2}",
            Rally.technicalservices.TimeModelBuilder.amendKeyPrefix,
            this.startDateString.replace(/T.*$/, ''),
            user_oid
        );

        this.logger.log('finding by key', key);


        var config = {
            model: 'Preference',
            context: {
                project: null
            },
            fetch: ['Name', 'Value', 'ObjectID'],
            filters: [
                { property: 'Name', operator: 'contains', value: key }
            ]
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    getDefaultPreference: function() {
        return this.timePreference;
    },

    _loadDefaultPreference: function() {
        this.setLoading('Loading preference information...');

        var user_oid = Rally.getApp().getContext().getUser().ObjectID;

        if (!Ext.isEmpty(this.timesheet_user)) {
            user_oid = this.timesheet_user.ObjectID;
        }

        var key = Ext.String.format("{0}.{1}",
            TSUtilities.pinKeyPrefix,
            user_oid
        );

        this.logger.log('finding by key', key);

        var config = {
            model: 'Preference',
            context: {
                project: null
            },
            fetch: ['Name', 'Value', 'ObjectID'],
            filters: [
                { property: 'Name', operator: 'contains', value: key }
            ]
        };

        return TSUtilities.loadWsapiRecords(config);
    },

    _makeGrid: function(rows) {
        this.removeAll();

        var table_store = Ext.create('Rally.data.custom.Store', {
            model: 'TSTableRow',
            groupField: '__SecretKey',
            data: rows,
            pageSize: 100
        });


        var me = this;

        this.grid = this.add({
            xtype: 'rallygrid',
            store: table_store,
            columnCfgs: this.getColumns(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            sortableColumns: true,
            disableSelection: true,
            enableColumnMove: false,
            enableColumnResize: true,

            viewConfig: {
                listeners: {
                    itemupdate: function(row, row_index) {
                        //me.logger.log('itemupdate', row);
                    },
                    viewready: me._addTooltip
                }
            },
            features: [{
                ftype: 'groupingsummary',
                startCollapsed: false,
                hideGroupedHeader: true,
                groupHeaderTpl: ' ',
                enableGroupingMenu: false
            }],
            listeners: {
                scope: this,
                columnresize: function(header_container, column, width) {
                    Ext.Array.each(this.columns, function(col) {
                        if (col.dataIndex == column.dataIndex) {
                            col.width = column.width;
                        }
                    });

                    this.fireEvent('columnresize', this.columns);
                }
            }
        });

        this.fireEvent('gridReady', this, this.grid);

    },

    _addTooltip: function(view) {
        this.toolTip = Ext.create('Ext.tip.ToolTip', {
            target: view.el,
            delegate: view.cellSelector,
            trackMouse: true,
            renderTo: Ext.getBody(),
            listeners: {
                beforeshow: function(tip) {

                    var trigger = tip.triggerElement,
                        parent = tip.triggerElement.parentElement,
                        columnTitle = view.getHeaderByCell(trigger).text,
                        columnDataIndex = view.getHeaderByCell(trigger).dataIndex;
                    var record = view.getRecord(parent);
                    if (!record) {
                        return false;
                    }

                    var columnText = null;
                    var value = record.get(columnDataIndex);

                    if (columnTitle == "Work Product" && !Ext.isEmpty(value)) {
                        columnText = value.Project && value.Project._refObjectName;
                    }

                    if (!Ext.isEmpty(columnText)) {
                        tip.update("<b>Project:</b> " + columnText);
                    }
                    else {
                        return false;
                    }
                }
            }
        });
    },

    _isForCurrentUser: function() {
        return (this.timesheet_user.ObjectID == Rally.getApp().getContext().getUser().ObjectID);
    },

    absorbTime: function(record) {

        var clone = Ext.clone(record).getData();
        record.clearAndRemove();

        if (clone.__Appended) {
            return this._absorbAppended(clone);
        }
        else {
            var original_row = this.getRowForAmendedRow(clone);

            if (Ext.isEmpty(original_row)) {
                return this._absorbAppended(clone); // original must have been removed
            }
            else {
                return this._absorbAmended(clone);
            }
        }

    },

    _absorbAmended: function(clone) {
        var deferred = Ext.create('Deft.Deferred');

        var days = ['__Monday', '__Tuesday', '__Wednesday', '__Thursday', '__Friday', '__Saturday', '__Sunday', '__Total'];
        var original_row = this.getRowForAmendedRow(clone);

        //var days = me._getDayValuesFromRow(clone);
        Ext.Array.each(days, function(day) {
            var clone_value = clone[day] || 0;
            var original_value = original_row.get(day) || 0;

            var new_value = original_value + clone[day];
            if (new_value < 0) { new_value = 0; }
            if (new_value > 24) { new_value = 24; }

            original_row.set(day, new_value);
        });

        original_row.save().then({
            success: function(result) {
                deferred.resolve(result);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }

        });

        return deferred.promise;
    },

    _absorbAppended: function(clone) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        var work_item = clone.Task;

        if (Ext.isEmpty(work_item)) {
            work_item = clone.WorkProduct;
        }

        this._getItemFromRef(work_item._ref).then({
            success: function(item) {
                me.addRowForItem(item, true).then({
                    scope: this,
                    success: function(row) {
                        var days = ['__Monday', '__Tuesday', '__Wednesday', '__Thursday', '__Friday', '__Saturday', '__Sunday', '__Total'];

                        //var days = me._getDayValuesFromRow(clone);
                        Ext.Array.each(days, function(day) {
                            if (clone[day] > 0) {
                                row.set(day, clone[day]);
                            }
                        });

                        row.save().then({
                            success: function(result) {
                                deferred.resolve(result);
                            },
                            failure: function(msg) {
                                deferred.reject(msg);
                            }
                        });
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    pinTime: function(record) {
        if (this.updatePinProcess && this.updatePinProcess.getState() === 'pending') {
            console.log('pinning in process...');
        }
        else {
            console.log('-- ', this.updatePinProcess && this.updatePinProcess.getState());
        }

        this.updatePinProcess = this.timePreference.addPin(record);
        this.updatePinProcess.then({
            success: function() {
                record.set('__Pinned', true);
            },
            failure: function(msg) {
                Ext.Msg.alert("Problem saving pin:", msg);
            }
        });

    },

    unpinTime: function(record) {
        var deferred = Ext.create('Deft.Deferred');

        if (this.updatePinProcess && this.updatePinProcess.getState() === 'pending') {
            console.log('pinning in process...');
        }
        else {
            console.log('-- ', this.updatePinProcess && this.updatePinProcess.getState());
        }

        this.updatePinProcess = this.timePreference.removePin(record);
        this.updatePinProcess.then({
            success: function() {
                record.set('__Pinned', false);
                deferred.resolve(record);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    _isItemPinned: function(item) {
        this.logger.log('is Item pinned?', item);
        if (Ext.isEmpty(this.timePreference)) { return false; }
        return this.timePreference.isPinned(item);
    },

    _getItemFromRef: function(item_ref) {
        var deferred = Ext.create('Deft.Deferred');
        var ref_array = item_ref.split(/\//);

        var objectid = ref_array.pop();
        var type = ref_array.pop();

        Rally.data.ModelFactory.getModel({
            type: type,
            success: function(model) {
                model.load(objectid, {
                    fetch: ['Name', 'FormattedID', 'Project', 'ObjectID', 'WorkProduct'],
                    callback: function(result, operation) {
                        if (operation.wasSuccessful()) {
                            deferred.resolve(result);
                        }
                    }
                });
            }
        });


        return deferred.promise;
    },

    cloneForAppending: function(record) {
        var me = this;
        var item = record.get('WorkProduct');

        if (!Ext.isEmpty(record.get('Task'))) {
            item = record.get('Task');
        }

        var type = item._type;
        var objectid = item.ObjectID;

        Rally.data.ModelFactory.getModel({
            type: type,
            success: function(model) {
                model.load(objectid, {
                    fetch: ['Name', 'FormattedID', 'Project', 'ObjectID', 'WorkProduct', 'Feature'],
                    callback: function(result, operation) {
                        if (operation.wasSuccessful()) {
                            result.set('__Amended', true);
                            me.addRowForItem(result);
                        }
                    }
                });
            }
        });
    },

    getRowForAmendedRow: function(amended_row) {
        this.logger.log('getting item row for', amended_row);
        var work_item = amended_row.Task;
        if (Ext.isEmpty(work_item)) {
            work_item = amended_row.WorkProduct;
        }


        var returnRow = null;
        var rows = [];
        var store_count = this.grid.getStore().data.items.length; // this.grid.getStore().getTotalCount();

        for (var i = 0; i < store_count; i++) {
            rows.push(this.grid.getStore().getAt(i));
        }

        Ext.Array.each(rows, function(row) {
            if (row) {
                if (!row.get('__Amended') && row.get('WorkProduct')) {
                    var task_oid = row.get('Task') && row.get('Task').ObjectID;
                    var wp_oid = row.get('WorkProduct').ObjectID;

                    if (task_oid == work_item.ObjectID || wp_oid == work_item.ObjectID) {
                        returnRow = row;
                    }
                }
            }
        });

        return returnRow;
    },

    // use force=true to ignore the fact that there's already a row (for appending)
    addRowForItem: function(item, force) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');

        this.logger.log('addRowForItem', item, force);

        if (!force && this._hasRowForItem(item)) {
            this.logger.log('has row already:', item);
        }
        else {
            var item_type = item.get('_type');

            var config = {
                WorkProductDisplayString: item.get('FormattedID') + ":" + item.get('Name'),
                WorkProduct: {
                    _refObjectName: item.get('Name'),
                    _ref: item.get('_ref'),
                    ObjectID: item.get('ObjectID')
                },
                WeekStartDate: this.startDateString,
                User: {
                    _ref: '/user/' + this.timesheet_user.ObjectID,
                    ObjectID: this.timesheet_user.ObjectID
                }
            };

            if (item.get('Project')) {
                config.Project = item.get('Project');
            }

            if (item_type == "task") {
                config.TaskDisplayString = item.get('FormattedID') + ":" + item.get('Name');
                config.Task = {
                    _ref: item.get('_ref'),
                    _refObjectName: config.TaskDisplayString,
                    ObjectID: item.get('ObjectID')
                };

                config.WorkProductDisplayString = item.get('WorkProduct').FormattedID + ":" + item.get('WorkProduct').Name;

                config.WorkProduct = {
                    _refObjectName: item.get('WorkProduct').Name,
                    _ref: item.get('WorkProduct')._ref,
                    ObjectID: item.get('WorkProduct').ObjectID
                };
            }

            if (!this._isForCurrentUser()) {
                // create a shadow item
                config.ObjectID = -1;
                config._type = "timeentryitem";

                config._refObjectUUID = -1;

                var data = {
                    __TimeEntryItem: Ext.create(this.tei_model, config),
                    __Feature: null,
                    __Product: config.Project,
                    __Release: config.WorkProduct.Release
                };


                if (item.get('__Amended')) {
                    data.__Amended = true;
                }
                else {
                    data.__Appended = true;
                }

                var row = Ext.create('TSTableRow', Ext.Object.merge(data, config));
                row.save();
                row.set('updatable', true); // so we can add values to the week 

                me.grid.getStore().loadRecords([row], { addRecords: true });

                me.rows.push(row);
                return row;
            }
            else {
                var fields = this.tei_model.getFields();

                var time_entry_item = Ext.create(this.tei_model, config);

                var fetch = Ext.Array.merge(Rally.technicalservices.TimeModelBuilder.getFetchFields(), this.time_entry_item_fetch);

                time_entry_item.save({
                    fetch: fetch,
                    callback: function(result, operation) {
                        if (operation.wasSuccessful()) {
                            var product = result.get('Project');
                            var workproduct = result.get('WorkProduct');
                            var feature = null;
                            var release = null;

                            if (!Ext.isEmpty(workproduct) && workproduct.Feature) {
                                feature = workproduct.Feature;
                                product = feature.Project;
                            }

                            if (!Ext.isEmpty(workproduct) && workproduct.Release) {
                                release = workproduct.Release;
                            }

                            var data = {
                                __TimeEntryItem: result,
                                __Feature: feature,
                                __Product: product,
                                __Release: release,
                                __Pinned: me._isItemPinned(result) || false
                            };


                            var row = Ext.create('TSTableRow', Ext.Object.merge(data, time_entry_item.getData()));


                            me.grid.getStore().loadRecords([row], { addRecords: true });
                            me.rows.push(row);

                            deferred.resolve(row);
                        }
                        else {
                            if (operation.error && operation.error.errors) {
                                console.log("ERROR:", operation);
                                Ext.Msg.alert("Problem saving time:", operation.error.errors.join(' '));
                                deferred.reject();
                            }
                            deferred.resolve();
                        }
                    }
                });
            }
        }

        return deferred.promise;
    },

    _hasRowForItem: function(item) {
        var item_type = item.get('_type');
        var amender = item.get('__Amended');

        var hasRow = false;
        var rows = [];
        var store_count = this.grid.getStore().data.items.length; // this.grid.getStore().getTotalCount();

        for (var i = 0; i < store_count; i++) {
            rows.push(this.grid.getStore().getAt(i));
        }

        Ext.Array.each(rows, function(row) {
            if (row) { // when clear and remove, we get an undefined row
                if (item_type == "task") {
                    if (row.get('Task') && row.get('Task')._ref == item.get('_ref')) {
                        if (amender && row.get('__Amended') || !amender) {
                            hasRow = true;
                        }
                    }
                }
                else {
                    if (Ext.isEmpty(row.get('Task')) && row.get('WorkProduct') && row.get('WorkProduct')._ref == item.get('_ref')) {
                        if (amender && row.get('__Amended') || !amender) {
                            hasRow = true;
                        }
                    }
                }
            }
        });

        return hasRow;
    },

    getColumns: function() {
        var me = this;

        this.logger.log('saved columns:', this.columns);

        var columns = [];
        var isForModification = !this._isForCurrentUser();

        if (this.week_locked) {
            isForModification = false;
        }

        if (this.editable || isForModification) {
            columns.push({
                xtype: 'tstimetablerowactioncolumn',
                forModification: isForModification,
                _exportHide: true
            });
        }

        Ext.Array.push(columns, [{
                dataIndex: '__TimeEntryItem',
                text: 'User',
                editor: null,
                hidden: true,
                _selectable: false,
                renderer: function(value) {
                    return value.get('User').UserName;
                }
            },
            {
                dataIndex: '__TimeEntryItem',
                text: 'Week Start',
                editor: null,
                hidden: true,
                _selectable: false,
                renderer: function(value) {
                    return value.get('WeekStartDate');
                }
            },
            {
                dataIndex: '__TimeEntryItem',
                text: 'Locked',
                editor: null,
                hidden: true,
                _selectable: false,
                renderer: function(value, meta, record) {
                    return record.isLocked() || false;
                }
            }
        ]);

        if (me.manager_field) {
            columns.push({
                dataIndex: '__TimeEntryItem',
                text: 'Manager',
                align: 'center',
                hidden: true,
                _selectable: false,
                renderer: function(value) {
                    return value.get('User')[me.manager_field] || "none";
                }
            });
        }
        if (me.timesheet_status || me.timesheet_status === false) {
            Ext.Array.push(columns, [{
                dataIndex: '__Product',
                text: 'Status',
                _selectable: true,
                renderer: function(v) { return me.timesheet_status; }
            }]);
        }

        Ext.Array.push(columns, [{
                text: '',
                width: 25,
                _selectable: false,
                renderer: function(value, meta, record) {
                    var display_string = "";

                    if (record.isLocked()) {
                        display_string += "<span class='icon-lock'> </span>";
                    }

                    if (record.get('__Appended')) {
                        display_string += "<span class='red icon-edit'> </span>";
                    }

                    if (record.get('__Amended')) {
                        display_string += "<span class='red icon-history'> </span>";
                    }

                    return display_string;
                },
                _csvIgnoreRender: true
            },
            {
                dataIndex: '__Product',
                text: 'Product',
                _selectable: true,
                flex: 1,
                editor: null,
                renderer: function(value, meta, record) {
                    if (Ext.isEmpty(value)) {
                        return "";
                    }
                    return value._refObjectName;
                },
                summaryRenderer: function() {
                    return "Totals";
                }
            },
            {
                dataIndex: '__Feature',
                text: 'Feature',
                flex: 1,
                editor: null,
                _selectable: true,
                renderer: function(value) {
                    if (Ext.isEmpty(value)) { return ""; }
                    //console.log(value);
                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        value._refObjectName
                    );
                },
                exportRenderer: function(value, meta, record) {
                    if (Ext.isEmpty(value)) { return ""; }
                    return value._refObjectName
                }
            },
            {
                dataIndex: 'WorkProduct',
                text: 'Work Product',
                flex: 1,
                editor: null,
                _selectable: true,
                renderer: function(value, meta, record) {
                    if (Ext.isEmpty(value)) {
                        return record.get('WorkProductDisplayString');
                    }

                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('WorkProductDisplayString')
                    );
                },
                exportRenderer: function(value, meta, record) {
                    return record.get('WorkProductDisplayString')
                }
            },
            {
                dataIndex: '__Release',
                text: 'Release',
                flext: 1,
                editor: null,
                _selectable: true,
                renderer: function(v) {
                    if (Ext.isEmpty(v)) { return ""; }
                    return v._refObjectName;
                }
            },
            {
                dataIndex: 'Task',
                text: 'Task',
                flex: 1,
                editor: null,
                _selectable: true,
                renderer: function(value, meta, record) {
                    if (Ext.isEmpty(value)) {
                        return record.get('TaskDisplayString');
                    }

                    return Ext.String.format("<a target='_blank' href='{0}'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(value),
                        record.get('TaskDisplayString')
                    );
                },
                exportRenderer: function(value, meta, record) {
                    return record.get('TaskDisplayString')
                }
            }
        ]);

        var day_width = 50;

        var editor_config = function(record, df) {

            if (record && record.isLocked()) {
                return false;
            }

            var minValue = 0;

            if (record && record.get('__Amended')) {
                minValue = -24;
            }

            var disabled = !me.editable;
            if (record && (record.get('__Appended') || record.get('__Amended'))) {
                disabled = false;
            }

            return Ext.create('Ext.grid.CellEditor', {
                field: Ext.create('Rally.ui.NumberField', {
                    xtype: 'rallynumberfield',
                    minValue: minValue,
                    maxValue: 24,
                    disabled: disabled,
                    selectOnFocus: true,
                    listeners: {
                        change: function(field, new_value, old_value) {
                            1
                            if (Ext.isEmpty(new_value)) {
                                field.setValue(0);
                            }
                        }
                    }
                })
            });

        };

        var weekend_renderer = function(value, meta, record) {
            meta.tdCls = "ts-weekend-cell";
            return value;
        };
        var total_renderer = function(value, meta, record) {
            meta.tdCls = "ts-total-cell";
            return value;
        };

        columns.push({
            dataIndex: '__Sunday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Sun',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum',
            renderer: weekend_renderer
        });
        columns.push({
            dataIndex: '__Monday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Mon',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum'
        });
        columns.push({
            dataIndex: '__Tuesday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Tue',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum'
        });
        columns.push({
            dataIndex: '__Wednesday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Wed',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum'
        });
        columns.push({
            dataIndex: '__Thursday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Thur',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum'
        });
        columns.push({
            dataIndex: '__Friday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Fri',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum'
        });
        columns.push({
            dataIndex: '__Saturday',
            field: {},
            width: day_width,
            resizable: false,
            _selectable: true,
            text: 'Sat',
            align: 'center',
            getEditor: editor_config,
            summaryType: 'sum',
            renderer: weekend_renderer
        });
        columns.push({
            dataIndex: '__Total',
            width: day_width,
            resizable: false,
            text: 'Total',
            align: 'center',
            editor: null,
            _selectable: true,
            summaryType: 'sum',
            summaryRenderer: function(value, meta, record) {
                if (value < 40) {
                    meta.style = 'background: #fec6cd;';
                }
                return value;
            },
            renderer: total_renderer
        });


        this.columns = this._applyUnsavableColumnAttributes(columns);

        return this.columns;
    },

    _applyUnsavableColumnAttributes: function(columns) {
        console.log('_applyUnsavableColumnAttributes', columns, this.columns);
        if (!Ext.isEmpty(this.columns)) {
            // columns saved as state lose their renderer functions
            var columns_by_index = {};
            Ext.Array.each(columns, function(column) {
                columns_by_index[column.dataIndex] = column;
            });

            Ext.Array.each(this.columns, function(column) {
                var cfg = columns_by_index[column.dataIndex];
                if (column.width && column.width > 0) {
                    column.flex = null;
                }
                if (cfg && cfg.renderer) {
                    column.renderer = cfg.renderer;
                }
                if (cfg && cfg.summaryRenderer) {
                    column.summaryRenderer = cfg.summaryRenderer;
                }

                if (cfg && cfg.editor) {
                    column.editor = cfg.editor;
                }


                if (cfg && cfg.getEditor) {
                    column.getEditor = cfg.getEditor;
                }

                if (cfg && cfg.summaryType) {
                    column.summaryType = cfg.summaryType;
                }

                if (cfg && cfg.exportRenderer) {
                    column.exportRenderer = cfg.exportRenderer;
                }

                if (cfg && cfg._selectable) {
                    column._selectable = cfg._selectable;
                }

            });

            console.log('-->', this.columns);
            return this.columns;
        }

        return columns;

    },

    getGrid: function() {
        return this.down('rallygrid');
    }


});

Ext.define('Rally.technicalservices.ApproveMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsapprovemenuitem',


    config: {
        text: 'Approve',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._approveRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {

        if ( this.records && this.records.length > 0 ) {
            var should_show = true;
            Ext.Array.each(this.records, function(r){
                if ( !this._isApprovable(r) ) {
                    should_show = false;
                }
            },this);
            return should_show;
        }
        return this._isApprovable(record);
    },
    
    _isApprovable: function(record) {
        return ( record.get('__Status') && record.get('__Status') != "Approved" );
    },
    
    _approveRecord: function(record) {
        if ( !record ) {
            Ext.Msg.alert("Problem approving record", "Can't find record");
            return;
        }
        
        record.approve();
    },
    
    _approveRecords: function() {
        var record = this.record;
        var records = this.records;
        
        if ( records.length === 0 ) {
            records = [record];
        }
                
        Ext.Array.each(records, function(r) {
            this._approveRecord(r);
        },this);
    }
});
Ext.define('Rally.technicalservices.UnlockMenuItem', {
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsunapprovemenuitem',


    config: {
        text: 'Unapprove',
        records: []
    },

    constructor: function(config) {
        config = config || {};

        config.predicate = config.predicate || this.shouldShowMenuItem;
        config.handler   = config.handler || this._unapproveRecords;
        
        this.initConfig(config);
        this.callParent([config]);
    },
    
    shouldShowMenuItem: function(record) {
        if ( this.records && this.records.length > 0 ) {
            var should_show = true;
            Ext.Array.each(this.records, function(r){
                if ( !this._isUnapprovable(r) ) {
                    should_show = false;
                }
            },this);
            return should_show;
        }
        return this._isUnapprovable(record);
    },
    
    _isUnapprovable: function(record) {
        return ( record.get('__Status') && record.get('__Status') == "Approved" );
    },
    
    _unapproveRecord: function(record) {
        if ( !record ) {
            Ext.Msg.alert("Problem unapproving record", "Can't find record");
            return;
        }
        
        record.unapprove();
    },
    
    _unapproveRecords: function() {
        var record = this.record;
        var records = this.records;
                
        if ( records.length === 0 ) {
            records = [record];
        }
        var me = this;
        Ext.Array.each(records, function(r) {
            me._unapproveRecord(r);
        });
    }
});

Ext.define('Rally.technicalservices.TimeApprovalRecordMenu', {
    extend: 'Rally.ui.menu.RecordMenu',
    alias: 'widget.tstimeapprovalrecordmenu',

    config: {

        /**
         * @cfg {Rally.data.Model} record (required)
         * The record to build the menu for
         */
        record: null,

        /**
         * @cfg {Ext.Element|HTMLElement} (optional) owningEl
         * The element this menu item is being invoked against.
         */
        owningEl: undefined

    },

    initComponent: function() {
        this.items = this._getMenuItems();
        
        this.callParent(arguments);
    },

    _getMenuItems: function() {
        var record = this.getRecord(),
            records = this.records || [],
            items = [],
            popoverPlacement = this.popoverPlacement || Rally.ui.popover.Popover.DEFAULT_PLACEMENT;

        if ( records && records.length > 0 ) {
            // bulk edit
            items.push({
                xtype: 'tsapprovemenuitem',
                view: this.view,
                record: record,
                records: records
            });
           
            if ( this.canUnapprove ) {
                items.push({
                    xtype: 'tsunapprovemenuitem',
                    view: this.view,
                    record: record,
                    records: records
                });
            }
        } else {
            items.push({
                xtype: 'tsapprovemenuitem',
                view: this.view,
                record: record
            });
                    
            if ( this.canUnapprove ) {
                items.push({
                    xtype: 'tsunapprovemenuitem',
                    view: this.view,
                    record: record
                });
            }
        }
        return items;
    }
});
Ext.override(Rally.ui.grid.CheckboxModel, {
    _recordIsSelectable: function(record) {
        return true;
    }
});
Ext.define('Rally.technicalservices.grid.RowActionColumn', {
    extend: 'Ext.grid.column.Column',
    alias: 'widget.tsrowactioncolumn',

    inheritableStatics: {
        getRequiredFetchFields: function(grid) {
            return (grid.enableBulkEdit && ['Project', 'Tags']) || [];
        }
    },
    
    /**
     * @property {Boolean} sortable False to disable sorting of this column
     *
     */
    sortable: false,
    /**
     * @property {Boolean} hideable False to disable hiding of column
     *
     */
    hideable: false,
    /**
     * @property {Boolean} resizable False to disable resizing of column
     *
     */
    resizable: false,
    /**
     * @property {Boolean} draggable False to disable reordering of a column
     *
     */
    draggable: false,
    /**
     * @property {Boolean} menuDisabled True to disable the column header menu containing sort/hide options
     *
     */
    menuDisabled: true,
    /**
     * @property {Number}
     *
     */
    flex: -1,
    minWidth: Ext.isIE9 ? 22 : 26,
    maxWidth: Ext.isIE9 ? 22 : 26,

    /**
     * @property {Boolean}
     * This column should not show up on print pages that include a printable grid
     */
    printable: false,

    tdCls: 'rally-cell-row-action',
    cls: 'row-action-column-header',

    config: {
        /**
         * @cfg {Function} rowActionsFn
         * @params record {Ext.data.Record} The record to be assigned to record menu items
         * A list of Rally.ui.menu.Menu#items objects that will be used as the row action options
         * Each row action can contain a predicate property which will be evaluated to see if the row action should be included
         * Usage:
         *      [
         *          {text: 'Move...', record: record, handler: function(){  // move this.record  }}
         *      ]
         */
        rowActionsFn: null,

        /**
         * @cfg {Object} scope The scope that the rowActionsFn is called with
         */
        scope: null,
        
        canUnapprove: false
    },

    constructor: function() {
        this.callParent(arguments);
        this.renderer = this._renderGearIcon;
    },

    initComponent: function() {
        this.callParent(arguments);
        this.on('click', this._showMenu, this);
    },

    onDestroy: function() {
        if (this.menu) {
            this.menu.destroy();
            delete this.menu;
        }

        this.callParent(arguments);
    },

    /**
     * @private
     * @param value
     * @param metaData
     * @param record
     */
    _renderGearIcon: function(value, metaData, record) {
        metaData.tdCls = Rally.util.Test.toBrowserTestCssClass('row-action', Rally.util.Ref.getOidFromRef(record.get('_ref')));
        return '<div class="row-action-icon icon-gear"/>';
    },

    /**
     * @private
     * @param view
     * @param el
     */
    _showMenu: function(view, el) {
        var selectedRecord = view.getRecord(Ext.fly(el).parent("tr")),
            checkedRecords = view.getSelectionModel().getSelection(),
            grid = view.panel,
            defaultOptions;

        defaultOptions = {
            view: view,
            record: selectedRecord,
            records: checkedRecords,
            owningEl: el.parentElement,
            popoverPlacement: ['bottom', 'top'],
            canUnapprove: this.canUnapprove
        };

        /*if (grid.enableBulkEdit && _.contains(checkedRecords, selectedRecord)) {
            this.menu = Ext.create('Rally.technicalservices.TimeApprovalRecordMenu', Ext.apply({
                context: grid.getContext(),
                records: checkedRecords,
                store: grid.store,
                onBeforeAction: function() {
                    if (view.loadMask && _.isFunction(view.loadMask.disable)) {
                        view.loadMask.disable();
                    }
                    grid.setLoading('Updating...');
                },
                onActionComplete: function(successfulRecords, unsuccessfulRecords, changes) {
                    grid.refreshAfterBulkAction(successfulRecords, changes).then({
                        success: function() {
                            grid.setLoading(false);
                            if (view.loadMask && _.isFunction(view.loadMask.enable)) {
                                view.loadMask.enable();
                            }
                            grid.getSelectionModel().deselect(successfulRecords);
                            grid.getSelectionModel().select(unsuccessfulRecords);
                            _.each(successfulRecords, grid.highlightRowForRecord, grid);
                            grid.publish(Rally.Message.bulkUpdate, successfulRecords, changes, grid);
                        }
                    });
                }
            }, grid.bulkEditConfig));
        } else*/ if (this.rowActionsFn) {
            this.menu = Ext.create('Rally.technicalservices.TimeApprovalRecordMenu', Ext.apply({
                items: this.rowActionsFn.call(this.scope || this, selectedRecord)
            }, defaultOptions));
        } else {
            this.menu = this._getDefaultRecordMenu(selectedRecord, defaultOptions);
        }

        this.menu.showBy(Ext.fly(el).down(".row-action-icon"));
    },

    _getDefaultRecordMenu: function(selectedRecord, defaultOptions) {
        var menu;
        var menuOptions = Ext.merge(defaultOptions, this.menuOptions || {});
        return Ext.create('Rally.technicalservices.TimeApprovalRecordMenu', menuOptions);
    }
});
Ext.override(Ext.selection.CheckboxModel,{
    onHeaderClick: function(headerCt, header, e) {
        // force open all if checking.
        var view = this.view;

        view.features[0].expandAll();
        
        if (header.isCheckerHd) {
            e.stopEvent();
            var me = this,
                isChecked = header.el.hasCls(Ext.baseCSSPrefix + 'grid-hd-checker-on');
                
            // Prevent focus changes on the view, since we're selecting/deselecting all records
            me.preventFocus = true;
            if (isChecked) {
                me.deselectAll();
            } else {
                me.selectAll();
            }
            delete me.preventFocus;
        }
    }
});

Ext.define('TSTimesheet',{
    extend: 'Ext.data.Model',
        
    fields: [
        { name: '__UserName', type:'object' },
        { name: '__Hours',  type: 'float',  defaultValue: 0 },
        { name: '__Status', type: 'string', defaultValue: 'Unknown' }, // Open, Approved, Locked
        { name: 'User', type: 'object' },
        { name: 'WeekStartDate', type: 'date' },
        { name: '__LastUpdateBy', type: 'object' },
        { name: '__LastUpdateDate', type: 'date' },
        { name: '__Comments', type: 'object' }
    ],
    
    isSelectable: function() {
        return true;
    },
    
    getPreferenceKey: function() {
        // get or create and then update pref
        return Ext.String.format("{0}.{1}.{2}.{3}", 
            TSUtilities.approvalKeyPrefix,
            TSDateUtils.getBeginningOfWeekISOForLocalDate(this.get('WeekStartDate')),
            this.get('User').ObjectID,
            new Date().getTime()
        );
    },
    
    getShortPreferenceKey: function() {
        // get or create and then update pref
        return Ext.String.format("{0}.{1}.{2}", 
            TSUtilities.approvalKeyPrefix,
            TSDateUtils.getBeginningOfWeekISOForLocalDate(this.get('WeekStartDate')),
            this.get('User').ObjectID
        );
    },
    
    _setStatus: function(status) {
        var deferred = Ext.create('Deft.Deferred');
        var current_user = Rally.getApp().getContext().getUser();
        var status_owner = { _type: 'User', '_ref': current_user._ref, '_refObjectName': current_user._refObjectName }
        
        this.set('__Status', status);
        this.set('__LastUpdateBy', status_owner._refObjectName);
        
        var pref_key = this.getPreferenceKey();
        var status_object = {
            status: status,
            status_date: new Date(),
            status_owner: status_owner
        };
        
        Deft.Chain.sequence([
            function() { return this._archivePreferences(this.getShortPreferenceKey()); },
            function() { return this._makePreference(pref_key,Ext.JSON.encode(status_object)); }
        ],this).then({
            scope: this,
            success: function(results) {
                deferred.resolve(results[0]);
            },
            failure: function(msg) {
                Ext.Msg.alert("Failed to save week lock state to " + pref_key, msg);
            }
        });
        return deferred.promise;
    },
    
    approve: function() {
        return this._setStatus('Approved');
    },
    
    unapprove: function() {
        return this._setStatus('Open');
    },
    
    _archivePreferences: function(key) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var filters = [
            {property:'Name',operator:'contains', value:key},
            {property:'Name',operator:'!contains',value:TSUtilities.archiveSuffix }
        ];
        
        var config = {
            model:'Preference',
            limit: Infinity,
            filters: filters,
            fetch: ['Name','Value']
        };
        
        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(preferences) {
                var promises = [];
                Ext.Array.each(preferences, function(preference) {
                    preference.set('Project',Rally.getApp().getSetting('preferenceProjectRef'));
                    preference.set('Name', preference.get('Name') + '.' + TSUtilities.archiveSuffix );
                    promises.push( function() { return me._savePreference(preference); });
                },this);
                
                Deft.Chain.sequence(promises).then({
                    success: function(result) {
                        deferred.resolve(result);
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _savePreference: function(preference) {
        var deferred = Ext.create('Deft.Deferred');
        
        preference.save({
            callback: function(result, operation) {
                if(operation.wasSuccessful()) {
                    deferred.resolve(result);
                } else {
                    console.log('Problem saving ', preference, operation);
                    deferred.reject("Could not archive old status");
                }
            }
        });
        return deferred.promise;
    },
    
    /* leave prefs is null or empty array to create a pref because
     * this is pipelined from the search for a pref.  So we might have
     * gotten something and just want to pass it through
     */
    _makePreference: function(key, value) {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: 'Preference',
            success: function(model) {
                var pref_config = {
                    Name: key,
                    Value: value
                };
                
                pref_config.Project = Rally.getApp().getSetting('preferenceProjectRef');
                
                var pref = Ext.create(model, pref_config);
                
                pref.save({
                    callback: function(result, operation) {
                        if(operation.wasSuccessful()) {
                            deferred.resolve([result]);
                        } else {
                            deferred.reject(operation.error.errors.join('. '));
                        }
                    }
                });
            }
        });
        return deferred.promise;
    }
    
});
Ext.define('Rally.technicalservices.ManagerDetailDialog', {
    extend: 'Rally.ui.dialog.Dialog',
    autoShow : true,
    closable : true,
    layout   : 'border',
    
    config: {
        record: null,
        commentKeyPrefix: '',
        manager_field: null
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },

    initComponent: function() {
        this.callParent(arguments);
    },
        
    beforeRender: function() {
        this.callParent(arguments);
        
        this._loadWeekLockPreference().then({
            scope: this,
            success: function(week_lock_prefs) {
                
                if ( week_lock_prefs.length > 0 ) {
                    var value = week_lock_prefs[0].get('Value');
                    var status_object = Ext.JSON.decode(value);
                    var locked = false;
                    
                    if ( status_object.status == "Locked" ) {
                        locked = true;
                    }
                }
                this.record.set('__Locked',locked);
                
                this.add({ 
                    xtype:  'tstimetable',
                    region: 'center',
                    layout: 'fit',
                    startDate: this.record.get('WeekStartDate'),
                    week_locked: locked,
                    editable: false,
                    manager_field: this.manager_field,
                    timesheet_user: this.record.get('User')
                });
                this.addDocked({
                    xtype: 'container',
                    dock: 'bottom',
                    layout: 'hbox',
                    itemId: 'popup_selector_box',
                    padding: 10,
                    items: [
                        {xtype:'container', itemId:'popup_left_box'},
                        {xtype:'container',  flex: 1},
                        {xtype:'container', itemId:'popup_right_box'}
                    ]
                });
                
                this._addSelectors();
                
            }, 
            failure: function(msg) {
                Ext.Msg.alert('Problem finding lock', msg);
            }
        });
    },
    
    _addSelectors: function() {
        var status = this.record.get('__Status');
        var locked = this.record.get('__Locked');
         
        var comment_key = Ext.String.format("{0}.{1}.{2}", 
            this.commentKeyPrefix,
            TSDateUtils.formatShiftedDate(this.record.get('WeekStartDate'),'Y-m-d'),
            this.record.get('User').ObjectID
        );
        
        var left_box = this.down('#popup_left_box');
        
        left_box.add({
            xtype:'rallybutton',
            text: '+<span class="icon-task"> </span>',
            disabled: (status == "Approved" || locked),
            toolTipText: "Search and add Tasks",
            listeners: {
                scope: this,
                click: this._findAndAddTask
            }
        });
        
        left_box.add({
            xtype:'rallybutton',
            text: '+<span class="icon-story"> </span>',
            toolTipText: "Search and add User Stories",
            disabled: (status == "Approved" || locked),
            listeners: {
                scope: this,
                click: this._findAndAddStory
            }
        });
        
        left_box.add({
            xtype:'tscommentbutton',
            toolTipText: 'Read/Add Comments',
            keyPrefix: comment_key
        });

        this.down('#popup_right_box').add({
            xtype:'rallybutton', 
            text:'Unapprove',
            disabled: (status != "Approved" || !TSUtilities._currentUserCanUnapprove()),
            listeners: {
                scope: this,
                click: function() {
                    this._unapproveTimesheet(this.record);
                    this.close();
                }
            }
        });
        
        this.down('#popup_right_box').add({
            xtype:'rallybutton', 
            text:'Approve',
            disabled: (status == "Approved"),
            listeners: {
                scope: this,
                click: function() {
                    this._approveTimesheet(this.record);
                    this.close();
                }
            }
        });
        
        this.down('#popup_right_box').add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });
        
    },
    
    _loadWeekLockPreference: function() {
        
        var key = Ext.String.format("{0}.{1}", 
            TSUtilities.timeLockKeyPrefix,
            TSDateUtils.formatShiftedDate(this.record.get('WeekStartDate'),'Y-m-d')
        );
        
        var filters = [
            {property:'Name',operator:'contains', value:key},
            {property:'Name',operator:'!contains',value:TSUtilities.archiveSuffix }
        ];
        
        var config = {
            model:'Preference',
            limit: 1,
            pageSize: 1,
            filters: filters,
            fetch: ['Name','Value'],
            sorters: [{property:'CreationDate',direction:'DESC'}]
        };
        
        return TSUtilities.loadWsapiRecords(config);
    },
    
    _approveTimesheet: function(record) {
        record.approve();
    },
    
    _unapproveTimesheet: function(record) {
        record.unapprove();
    },
    
    _findAndAddTask: function() {
        var timetable = this.down('tstimetable');
        
        var fetch_fields = Ext.Array.merge(
            Rally.technicalservices.TimeModelBuilder.getFetchFields(),
            ['WorkProduct','Feature','Project']
        );
        
        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['task'],
                autoShow: true,
                multiple: true,
                title: 'Choose Task(s)',
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'WorkProduct',
                        attributeName: 'WorkProduct.Name'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release.Name'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName: 'State',
                        attributeName: 'State'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'WorkProduct',
                    'Release',
                    'Project',
                    'Owner',
                    'State'
                ],
                storeConfig: {
                    filters: [{property:'Release.' + Rally.technicalservices.TimeModelBuilder.deploy_field, operator: '!=', value: true }]
                },
                fetchFields: fetch_fields,
                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }
                        
                        Ext.Array.each(selectedRecords, function(selectedRecord){
                            timetable.addRowForItem(selectedRecord);
                        });
                    },
                    scope: this
                }
             });
        }
    },
    
    _findAndAddStory: function() {
        var timetable = this.down('tstimetable');
        if (timetable) {
            Ext.create('Rally.technicalservices.ChooserDialog', {
                artifactTypes: ['hierarchicalrequirement'],
                autoShow: true,
                title: 'Choose Story(ies)',
                multiple: true,
                filterableFields: [
                    {
                        displayName: 'Formatted ID',
                        attributeName: 'FormattedID'
                    },
                    {
                        displayName: 'Name',
                        attributeName: 'Name'
                    },
                    {
                        displayName:'Feature',
                        attributeName: 'Feature.Name'
                    },
                    {
                        displayName:'Release',
                        attributeName: 'Release.Name'
                    },
                    {
                        displayName:'Project',
                        attributeName: 'Project.Name'
                    },
                    {
                        displayName:'Owner',
                        attributeName: 'Owner'
                    },
                    {
                        displayName:'State',
                        attributeName: 'ScheduleState'
                    }
                ],
                columns: [
                    {
                        text: 'ID',
                        dataIndex: 'FormattedID'
                    },
                    'Name',
                    'WorkProduct',
                    'Release',
                    'Project',
                    'Owner',
                    'ScheduleState'
                ],
        
                fetchFields: Ext.Array.merge(
                    Rally.technicalservices.TimeModelBuilder.getFetchFields(),
                    ['WorkProduct','Feature','Project', 'ObjectID', 'Name', 'Release']
                ),
                listeners: {
                    artifactchosen: function(dialog, selectedRecords){
                        if ( !Ext.isArray(selectedRecords) ) {
                            selectedRecords = [selectedRecords];
                        }
                        
                        Ext.Array.each(selectedRecords, function(selectedRecord){
                            timetable.addRowForItem(selectedRecord);
                        });
                    },
                    scope: this
                }
             });
        }
    },
    
    _export: function(){
        var grid = this.down('tstimetable').getGrid();
        var me = this;
        
        if ( !grid ) { return; }
        
        var filename = Ext.String.format('manager-detail-report.csv');

        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromGrid(this,grid) } 
        ]).then({
            scope: this,
            success: function(csv){
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    }
    
});
Ext.define("TSTimeSheetApproval", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    layout: 'border',

    items: [
        { xtype: 'container', itemId: 'selector_box', region: 'north', layout: { type: 'hbox' } },
        { xtype: 'container', itemId: 'display_box', region: 'center', layout: { type: 'fit' } }
    ],

    _commentKeyPrefix: 'rally.technicalservices.timesheet.comment',

    integrationHeaders: {
        name: "TSTimeSheetApproval"
    },

    stateFilterValue: 'Open',

    config: {
        defaultSettings: {
            managerField: 'DisplayName',
            showAllForAdmins: true,
            preferenceProjectRef: '/project/51712374295'
        }
    },

    launch: function() {
        var preference_project_ref = this.getSetting('preferenceProjectRef');
        if (!TSUtilities.isEditableProjectForCurrentUser(preference_project_ref, this)) {
            Ext.Msg.alert('Contact your Administrator', 'This app requires editor access to the preference project.');
        }
        else {
            this._addSelectors(this.down('#selector_box'));
        }
    },

    _addSelectors: function(container) {
        container.removeAll();

        container.add({
            xtype: 'rallybutton',
            cls: 'secondary',
            text: '<span class="icon-expandall"> </span>',
            expanded: false,
            listeners: {
                scope: this,
                click: function(button) {
                    if (button.expanded == true) {
                        button.expanded = false;
                        button.setText('<span class="icon-expandall"> </span>');
                        var grid = this.down('rallygrid');
                        if (grid) {
                            grid.getView().features[0].collapseAll();
                        }
                    }
                    else {
                        button.expanded = true;
                        button.setText('<span class="icon-collapseall"> </span>');
                        var grid = this.down('rallygrid');
                        if (grid) {
                            grid.getView().features[0].expandAll();
                        }
                    }
                }
            }
        });

        container.add({
            xtype: 'rallybutton',
            itemId: 'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function() {
                    this._export();
                }
            }
        });

        var state_store = Ext.create('Ext.data.Store', {
            fields: ['displayName', 'value'],
            data: [
                { displayName: 'All', value: 'ALL' },
                { displayName: 'Open', value: 'Open' },
                { displayName: 'Approved', value: 'Approved' }
            ]
        });

        container.add({ xtype: 'container', flex: 1 });

        container.add({
            xtype: 'combobox',
            value: this.stateFilterValue,
            fieldLabel: 'Timesheet State:',
            store: state_store,
            queryMode: 'local',
            displayField: 'displayName',
            valueField: 'value',
            margin: 10,
            width: 200,
            listeners: {
                scope: this,
                change: function(cb) {
                    this.stateFilterValue = cb.getValue();
                    this._enableGoButton();
                }
            }
        });

        var date_container = container.add({
            xtype: 'container',
            layout: 'vbox',
            margin: 3
        });

        var week_start = Rally.util.DateTime.add(new Date(), 'week', -4);

        date_container.add({
            xtype: 'rallydatefield',
            itemId: 'from_date_selector',
            fieldLabel: 'From Week',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    var week_start = TSDateUtils.getBeginningOfWeekForLocalDate(new_value);
                    if (week_start !== new_value) {
                        dp.setValue(week_start);
                    }
                    this._enableGoButton();
                }
            }
        }).setValue(week_start)

        date_container.add({
            xtype: 'rallydatefield',
            itemId: 'to_date_selector',
            fieldLabel: 'Through Week',
            listeners: {
                scope: this,
                change: function(dp, new_value) {
                    var week_start = TSDateUtils.getBeginningOfWeekForLocalDate(new_value);
                    if (week_start !== new_value) {
                        dp.setValue(week_start);
                    }
                    this._enableGoButton();
                }
            }
        }).setValue(Rally.util.DateTime.add(new Date(), 'week', -1));

        container.add({
            xtype: 'rallybutton',
            itemId: 'go_button',
            text: 'Go',
            margin: '15 3 3 3',
            disabled: false,
            listeners: {
                scope: this,
                click: this._updateData
            }
        });

        container.add({ xtype: 'container', flex: 1 });

        //if ( this.isExternal() ) {
        container.add({ type: 'container', html: '&nbsp;&nbsp;&nbsp;', border: 0, padding: 10 });
        //}

    },

    _enableGoButton: function() {
        var start_calendar = this.down('#from_date_selector');
        var to_calendar = this.down('#to_date_selector');

        var go_button = this.down('#go_button');

        go_button && go_button.setDisabled(true);

        if (start_calendar && to_calendar) {
            go_button && go_button.setDisabled(false);
        }
    },

    _updateData: function() {
        var me = this;
        this.down('#display_box').removeAll();
        this.down('#go_button').setDisabled(true);

        this.startDate = this.down('#from_date_selector').getValue();
        this.endDate = this.down('#to_date_selector').getValue();

        if (this.pipeline && this.pipeline.getState() === 'pending') {
            this.pipeline.cancel();
        }

        this.pipeline = Deft.Chain.pipeline([
            this._loadTimesheets,
            this._loadPreferences,
            this._loadComments
        ], this);

        this.pipeline.then({
            scope: this,
            success: function(timesheets) {
                this._addGrid(this.down('#display_box'), timesheets);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem loading users with timesheets', msg);
            }
        }).always(function() { me.setLoading(false); });
    },

    _loadTimesheets: function() {
        var deferred = Ext.create('Deft.Deferred');
        this.setLoading("Loading timesheets...");

        var filters = [
            // TODO (tj) Is this required?? { property: 'User.NoTimesheet', value: false },
            { property: 'User.Disabled', value: false }
        ];

        if (this.down('#from_date_selector')) {
            var start_date = TSDateUtils.getBeginningOfWeekISOForLocalDate(this.startDate, true);
            filters.push({ property: 'WeekStartDate', operator: '>=', value: start_date });
        }

        if (this.down('#to_date_selector')) {
            var start_date = TSDateUtils.getBeginningOfWeekISOForLocalDate(this.endDate, true);
            filters.push({ property: 'WeekStartDate', operator: '<=', value: start_date });
        }

        console.log('IsAdmin:', TSUtilities.currentUserIsAdmin());

        if (!this.getSetting('showAllForAdmins') || !TSUtilities.currentUserIsAdmin()) {
            var current_user_name = this.getContext().getUser().UserName;
            filters.push({ property: 'User.' + this.getSetting('managerField'), value: current_user_name });
        }

        var config = {
            model: 'TimeEntryItem',
            limit: 'Infinity',
            filters: filters,
            context: {
                project: null
            },
            fetch: ['User', 'WeekStartDate', 'ObjectID', 'UserName', 'Values:summary[Hours]', this.getSetting('managerField')]
        };

        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(results) {
                var timesheets = {};

                Ext.Array.each(results, function(item) {
                    var key = Ext.String.format("{0}_{1}",
                        item.get('User').ObjectID,
                        Rally.util.DateTime.toIsoString(item.get('WeekStartDate'))
                    );

                    if (!timesheets[key]) {
                        timesheets[key] = Ext.Object.merge(item.getData(), {
                            __UserName: item.get('User').UserName,
                            __Hours: 0,
                            __Status: "Unknown"
                        });
                    }

                    var hours = timesheets[key].__Hours || 0;

                    timesheets[key].__Hours = this._addHoursFromTimeEntryItem(hours, item);

                }, this);

                deferred.resolve(Ext.Array.map(Ext.Object.getValues(timesheets), function(timesheet) {
                    return Ext.create('TSTimesheet', timesheet);
                }));

                this.setLoading(false);

            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    _loadPreferences: function(timesheets) {
        var deferred = Ext.create('Deft.Deferred');
        this.setLoading("Loading statuses...");
        var stateFilter = this.stateFilterValue;

        var filters = [
            { property: 'Name', operator: 'contains', value: TSUtilities.approvalKeyPrefix },
            { property: 'Name', operator: '!contains', value: TSUtilities.archiveSuffix }
        ];

        var config = {
            model: 'Preference',
            limit: 'Infinity',
            filters: filters,
            fetch: ['Name', 'Value'],
            sorters: [{ property: 'CreationDate', direction: 'ASC' }]
        };

        TSUtilities.loadWsapiRecords(config).then({
            scope: this,
            success: function(preferences) {
                this.logger.log("Applying preferences", preferences);
                var preferences_by_key = {};

                Ext.Array.each(preferences, function(pref) {
                    var pref_name_array = pref.get('Name').split('.');
                    pref_name_array.pop();

                    preferences_by_key[pref_name_array.join('.')] = pref;
                });

                this.logger.log('Preferences by Key', preferences_by_key);

                Ext.Array.each(timesheets, function(timesheet) {
                    var key = timesheet.getShortPreferenceKey();

                    if (preferences_by_key[key]) {
                        var value = preferences_by_key[key].get('Value');
                        var status_object = {};
                        if (/{/.test(value)) {
                            status_object = Ext.JSON.decode(value);
                        }
                        else {
                            status_object = {
                                status: value,
                                status_owner: { _refObjectName: '' }
                            }
                        }

                        timesheet.set('__Status', status_object.status || "Open");
                        timesheet.set('__LastUpdateBy', status_object.status_owner._refObjectName || "");

                    }
                    else {
                        timesheet.set('__Status', 'Open');
                    }
                }, this);

                var filtered_timesheets = Ext.Array.filter(timesheets, function(timesheet) {
                    if (stateFilter == "ALL") {
                        return true;
                    }

                    return (timesheet.get('__Status') == stateFilter);
                });

                this.setLoading(false);
                deferred.resolve(filtered_timesheets);

            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    _loadComments: function(timesheets) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        this.setLoading("Loading comments...");

        var timesheets_by_key = {};

        var filters = Ext.Array.map(timesheets, function(timesheet) {
            var comment_key = Ext.String.format("{0}.{1}.{2}",
                me._commentKeyPrefix,
                TSDateUtils.formatShiftedDate(timesheet.get('WeekStartDate'), 'Y-m-d'),
                timesheet.get('User').ObjectID
            );

            timesheets_by_key[comment_key] = timesheet;

            return { property: 'Name', operator: 'contains', value: comment_key };
        });

        var promises = [];

        Ext.Array.each(filters, function(filter) {
            var config = {
                model: 'Preference',
                limit: 'Infinity',
                filters: [filter],
                fetch: ['Name', 'Value'],
                context: {
                    project: null
                }
            };

            promises.push(function() { return TSUtilities.loadWsapiRecords(config); });
        });

        CA.techservices.promise.ParallelThrottle.throttle(promises, 6, me).then({
            success: function(results) {
                var comments = Ext.Array.flatten(results);

                Ext.Array.each(comments, function(comment) {
                    var name_array = comment.get('Name').split(/\./);
                    name_array.pop();
                    var key = name_array.join('.');

                    var timesheet = timesheets_by_key[key];
                    if (Ext.isEmpty(timesheet)) {
                        me.logger.log('skip ', key);
                        return;
                    }

                    var timesheet_comments = timesheet.get('__Comments');
                    if (Ext.isEmpty(timesheet_comments)) {
                        timesheet_comments = [];
                    }
                    timesheet_comments.push(comment);
                    timesheet.set('__Comments', timesheet_comments);
                });

                deferred.resolve(Ext.Object.getValues(timesheets_by_key));
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });


        return deferred.promise;
    },

    _addHoursFromTimeEntryItem: function(hours, item) {
        var summary = item.get('Summary');
        if (summary && summary.Values && summary.Values.Hours) {
            var hour_summary = summary.Values.Hours;
            Ext.Object.each(hour_summary, function(key, value) {
                hours = hours + (key * value);
            });
        }
        return hours;
    },

    _addGrid: function(container, timesheets) {
        this.logger.log("_addGrid", timesheets);

        var store = Ext.create('Rally.data.custom.Store', {
            data: timesheets,
            groupField: 'User',
            groupDir: 'ASC',
            pageSize: 50000,
            model: 'TSTimesheet',
            sorters: [{ property: '__UserName' }, { property: 'WeekStartDate', direction: 'DESC' }],
            getGroupString: function(record) {
                var owner = record.get('User');
                return (owner && owner._refObjectName) || 'No Owner';
            }
        });

        var columns = this._getColumns();

        container.add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: columns,
            enableEditing: false,
            showRowActionsColumn: false,
            enableBulkEdit: true,
            showPagingToolbar: false,
            features: [{
                ftype: 'groupingsummary',
                startCollapsed: true,
                groupHeaderTpl: '{name} ({rows.length})'
            }],
            _recordIsSelectable: function(record) {
                return true;
            },
            listeners: {
                scope: this,
                itemclick: function(grid, record, item, index, evt) {
                    var column = grid.getPositionByEvent(evt).column;
                    if (column > 1) {
                        this._popup(record);
                    }
                },
                viewready: function() {
                    this.down('#export_button') && this.down('#export_button').setDisabled(false);
                },
                destroy: function() {
                    this.down('#export_button') && this.down('#export_button').setDisabled(true);
                }
            }
        });
    },

    _getColumns: function() {
        var me = this;
        var columns = [{
            xtype: 'tsrowactioncolumn',
            canUnapprove: TSUtilities._currentUserCanUnapprove()
        }];

        columns.push({
            dataIndex: 'User',
            text: 'User',
            renderer: function(v) { return v._refObjectName || value.UserName; }
        });
        columns.push({
            dataIndex: 'WeekStartDate',
            text: 'Week Starting',
            align: 'center',
            renderer: function(v) {
                return TSDateUtils.formatShiftedDate(v, 'm/d/y');
            }
        });
        columns.push({
            dataIndex: '__Hours',
            text: 'Hours',
            align: 'center',
            renderer: me._renderColor
        });
        columns.push({ dataIndex: '__Status', text: 'Status', align: 'center' });
        columns.push({ dataIndex: '__LastUpdateBy', text: 'Status Changed By', align: 'center' });

        columns.push({
            dataIndex: 'User',
            text: 'Manager',
            align: 'center',
            renderer: function(v) {
                return v[me.getSetting('managerField')] || "none";
            }
        });

        columns.push({
            dataIndex: '__Comments',
            text: "Comments",
            align: 'center',
            renderer: function(v) {
                if (Ext.isEmpty(v)) { return 0; }
                if (!Ext.isArray(v)) { return 0; }
                return v.length;
            }
        });
        return columns;
    },

    _popup: function(record) {
        var user_name = record.get('User')._refObjectName;
        var status = record.get('__Status');
        this.logger.log("_popup", user_name, status, record);

        Ext.create('Rally.technicalservices.ManagerDetailDialog', {
            id: 'popup',
            width: Ext.getBody().getWidth() - 150,
            height: Ext.getBody().getHeight() - 150,
            title: Ext.String.format("{0}: {1} ({2})",
                user_name,
                TSDateUtils.formatShiftedDate(record.get('WeekStartDate'), 'j F Y'),
                status
            ),
            autoShow: true,
            autoCenter: true,
            closable: true,
            commentKeyPrefix: this._commentKeyPrefix,
            record: record,
            manager_field: this.getSetting('managerField')
        });
    },

    //    getOptions: function() {
    //        return [
    //            {
    //                text: 'About...',
    //                handler: this._launchInfo,
    //                scope: this
    //            }
    //        ];
    //    },

    _export: function() {
        var grid = this.down('rallygrid');
        var me = this;

        if (!grid) { return; }

        this.logger.log('_export', grid);

        var filename = 'manager-time-report.csv';

        this.setLoading("Generating CSV");

        var promises = [];

        this.logger.log('before selected list');
        var selected = grid.getSelectionModel().getSelection();
        this.logger.log('selected', selected);

        if (!selected || selected.length == 0) {
            this.logger.log('export selected items');
            promises.push(function() { return Rally.technicalservices.FileUtilities.getCSVFromGrid(this, grid) });
        }

        Ext.Array.each(selected, function(item, idx) {
            promises.push(function() {
                return me._getCSVFromTimesheet(item, (idx > 0));
            });
        });

        Deft.Chain.sequence(promises).then({
            scope: this,
            success: function(results) {
                this.logger.log('got csv', results);

                var csv = results.join('\r\n');

                if (csv && csv.length > 0) {
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv, filename);
                }
                else {
                    Rally.ui.notify.Notifier.showWarning({ message: 'No data to export' });
                }

            }
        }).always(function() { me.setLoading(false); });
    },

    _getCSVFromTimesheet: function(timesheet, skip_headers) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        this.logger.log('_getCSVFromTimesheet', timesheet, skip_headers);

        var status = timesheet.get('__Status');

        var timetable = Ext.create('Rally.technicalservices.TimeTable', {
            startDate: timesheet.get('WeekStartDate'),
            editable: false,
            timesheet_status: timesheet.get('__Status'),
            timesheet_user: timesheet.get('User'),
            listeners: {
                scope: this,
                gridReady: function(timetable, grid) {
                    if (grid.getStore().isLoading()) {
                        grid.getStore().on('load', function() {
                            deferred.resolve(Rally.technicalservices.FileUtilities.getCSVFromGrid(me, grid, skip_headers));
                        }, this, { single: true });
                    }
                    else {
                        deferred.resolve(Rally.technicalservices.FileUtilities.getCSVFromGrid(this, grid, skip_headers));
                    }
                }
            }
        });

        return deferred.promise;
    },

    _renderColor: function(value, metaData, record) {
        var white = "#ffffff";
        var red = '#fec6cd';
        var yellow = '#ffffcc';
        var orange = '#FF9933';
        var grey = '#D0D0D0';
        var color = grey;

        if (value >= 40 && value < 67.51) {
            color = white;
        }
        if (value < 40) {
            color = yellow;
        }

        console.log(record);
        var record_week_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(record.get('WeekStartDate'));
        var current_week_start = TSDateUtils.getBeginningOfWeekISOForLocalDate(new Date());

        console.log('comparing', record_week_start, current_week_start);

        if (record_week_start < current_week_start && value < 40) {
            color = red;
        }

        metaData.style = "background-color: " + color;
        return value;
    },

    _launchInfo: function() {
        if (this.about_dialog) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink', {});
    },

    isExternal: function() {
        return typeof(this.getAppId()) == 'undefined';
    },

    _filterOutExceptStrings: function(store) {
        var app = Rally.getApp();
        app.logger.log('_filterOutExceptChoices');

        store.filter([{
            filterFn: function(field) {
                var attribute_definition = field.get('fieldDefinition').attributeDefinition;
                var attribute_type = null;
                if (attribute_definition) {
                    attribute_type = attribute_definition.AttributeType;
                }
                if (attribute_type == "BOOLEAN") {
                    return false;
                }
                if (attribute_type == "STRING") {
                    if (!field.get('fieldDefinition').attributeDefinition.Constrained) {
                        return true;
                    }
                }
                return false;
            }
        }]);
    },

    getSettingsFields: function() {
        var me = this;

        return [{
                name: 'showAllForAdmins',
                xtype: 'rallycheckboxfield',
                boxLabelAlign: 'after',
                fieldLabel: '',
                margin: '0 0 25 10',
                boxLabel: 'Show All<br/><span style="color:#999999;"><i>Tick to show all timesheets regardless of manager for admins.</i></span>'
            }, {
                name: 'preferenceProjectRef',
                xtype: 'rallyprojectpicker',
                fieldLabel: 'Preference Project',
                workspace: this.getContext().getWorkspaceRef(),
                showMostRecentlyUsedProjects: false,
                autoExpand: true,
                labelWidth: 75,
                labelAlign: 'left',
                minWidth: 200,
                margin: 10
            },
            {
                name: 'managerField',
                xtype: 'rallyfieldcombobox',
                fieldLabel: 'User Manager Field',
                labelWidth: 75,
                labelAlign: 'left',
                minWidth: 200,
                margin: 10,
                autoExpand: false,
                alwaysExpanded: false,
                model: 'User',
                listeners: {
                    ready: function(field_box) {
                        me._filterOutExceptStrings(field_box.getStore());
                    }
                },
                readyEvent: 'ready'
            }
        ];
    },

    //onSettingsUpdate:  Override
    onSettingsUpdate: function(settings) {
        this.logger.log('onSettingsUpdate', settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});


            Rally.launchApp('TSTimeSheetApproval', {
                name: 'timesheet-with-approval (manager-view)'
            });
        });
    </script>

    <style type="text/css">
        
.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-window {
    border: 2px solid black !important;
}

td.ts-total-cell {
    background-color: #eee !important;
}

.x-grid-row-summary {
    background-color: #eee;
}

td.manager-red {
  color: black;
  background: #fec6cd !important;
}

    </style>

</head>

<body></body>

</html>